//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

ErrorType = {
'UNKNOWN' : 0,
'QUERY_CANCEL' : 1,
'QUERY_TIMEOUT' : 2,
'BACK_PRESSURE' : 3,
'REQUEST_TIMEOUT' : 4
};
ScoreType = {
'SUPER' : 0,
'AGGREGATE' : 1,
'BEST' : 2,
'CONSTANT' : 3
};
QueryState = {
'RUNNING' : 0,
'INTERRUPTED' : 1,
'COMPLETE' : 2,
'BACK_PRESSURE_INTERRUPTED' : 3
};
Status = {
'NOT_FOUND' : 0,
'FOUND' : 1
};
RowMutationType = {
'DELETE_ROW' : 0,
'REPLACE_ROW' : 1,
'UPDATE_ROW' : 2
};
RecordMutationType = {
'DELETE_ENTIRE_RECORD' : 0,
'REPLACE_ENTIRE_RECORD' : 1,
'REPLACE_COLUMNS' : 2,
'APPEND_COLUMN_VALUES' : 3
};
ShardState = {
'OPENING' : 0,
'OPEN' : 1,
'OPENING_ERROR' : 2,
'CLOSING' : 3,
'CLOSED' : 4,
'CLOSING_ERROR' : 5
};
Level = {
'OFF' : 0,
'FATAL' : 1,
'ERROR' : 2,
'WARN' : 3,
'INFO' : 4,
'DEBUG' : 5,
'TRACE' : 6,
'ALL' : 7
};
BlurObjectType = {
'MAP' : 0,
'LIST' : 1,
'NAME' : 2,
'VALUE' : 3
};
CommandStatusState = {
'RUNNING' : 0,
'INTERRUPTED' : 1,
'COMPLETE' : 2,
'BACK_PRESSURE_INTERRUPTED' : 3
};
BlurException = function(args) {
  this.message = null;
  this.stackTraceStr = null;
  this.errorType = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.stackTraceStr !== undefined) {
      this.stackTraceStr = args.stackTraceStr;
    }
    if (args.errorType !== undefined) {
      this.errorType = args.errorType;
    }
  }
};
Thrift.inherits(BlurException, Thrift.TException);
BlurException.prototype.name = 'BlurException';
BlurException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stackTraceStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.errorType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlurException.prototype.write = function(output) {
  output.writeStructBegin('BlurException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.stackTraceStr !== null && this.stackTraceStr !== undefined) {
    output.writeFieldBegin('stackTraceStr', Thrift.Type.STRING, 2);
    output.writeString(this.stackTraceStr);
    output.writeFieldEnd();
  }
  if (this.errorType !== null && this.errorType !== undefined) {
    output.writeFieldBegin('errorType', Thrift.Type.I32, 3);
    output.writeI32(this.errorType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeoutException = function(args) {
  this.instanceExecutionId = null;
  if (args) {
    if (args.instanceExecutionId !== undefined) {
      this.instanceExecutionId = args.instanceExecutionId;
    }
  }
};
Thrift.inherits(TimeoutException, Thrift.TException);
TimeoutException.prototype.name = 'TimeoutException';
TimeoutException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.instanceExecutionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeoutException.prototype.write = function(output) {
  output.writeStructBegin('TimeoutException');
  if (this.instanceExecutionId !== null && this.instanceExecutionId !== undefined) {
    output.writeFieldBegin('instanceExecutionId', Thrift.Type.I64, 1);
    output.writeI64(this.instanceExecutionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

User = function(args) {
  this.username = null;
  this.attributes = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.attributes = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readString().value;
          this.attributes[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter8 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter8))
      {
        var viter9 = this.attributes[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Column = function(args) {
  this.name = null;
  this.value = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Column.prototype = {};
Column.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Column.prototype.write = function(output) {
  output.writeStructBegin('Column');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Record = function(args) {
  this.recordId = null;
  this.family = null;
  this.columns = null;
  if (args) {
    if (args.recordId !== undefined) {
      this.recordId = args.recordId;
    }
    if (args.family !== undefined) {
      this.family = args.family;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
  }
};
Record.prototype = {};
Record.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.recordId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.columns = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new Column();
          elem16.read(input);
          this.columns.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Record.prototype.write = function(output) {
  output.writeStructBegin('Record');
  if (this.recordId !== null && this.recordId !== undefined) {
    output.writeFieldBegin('recordId', Thrift.Type.STRING, 1);
    output.writeString(this.recordId);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 2);
    output.writeString(this.family);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter17 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter17))
      {
        iter17 = this.columns[iter17];
        iter17.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Row = function(args) {
  this.id = null;
  this.records = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.records !== undefined) {
      this.records = args.records;
    }
  }
};
Row.prototype = {};
Row.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.records = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new Record();
          elem24.read(input);
          this.records.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Row.prototype.write = function(output) {
  output.writeStructBegin('Row');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.records !== null && this.records !== undefined) {
    output.writeFieldBegin('records', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.records.length);
    for (var iter25 in this.records)
    {
      if (this.records.hasOwnProperty(iter25))
      {
        iter25 = this.records[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Query = function(args) {
  this.query = null;
  this.rowQuery = true;
  this.scoreType = 0;
  this.rowFilter = null;
  this.recordFilter = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.rowQuery !== undefined) {
      this.rowQuery = args.rowQuery;
    }
    if (args.scoreType !== undefined) {
      this.scoreType = args.scoreType;
    }
    if (args.rowFilter !== undefined) {
      this.rowFilter = args.rowFilter;
    }
    if (args.recordFilter !== undefined) {
      this.recordFilter = args.recordFilter;
    }
  }
};
Query.prototype = {};
Query.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.rowQuery = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.scoreType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.rowFilter = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.recordFilter = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Query.prototype.write = function(output) {
  output.writeStructBegin('Query');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.rowQuery !== null && this.rowQuery !== undefined) {
    output.writeFieldBegin('rowQuery', Thrift.Type.BOOL, 2);
    output.writeBool(this.rowQuery);
    output.writeFieldEnd();
  }
  if (this.scoreType !== null && this.scoreType !== undefined) {
    output.writeFieldBegin('scoreType', Thrift.Type.I32, 3);
    output.writeI32(this.scoreType);
    output.writeFieldEnd();
  }
  if (this.rowFilter !== null && this.rowFilter !== undefined) {
    output.writeFieldBegin('rowFilter', Thrift.Type.STRING, 4);
    output.writeString(this.rowFilter);
    output.writeFieldEnd();
  }
  if (this.recordFilter !== null && this.recordFilter !== undefined) {
    output.writeFieldBegin('recordFilter', Thrift.Type.STRING, 5);
    output.writeString(this.recordFilter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HighlightOptions = function(args) {
  this.query = null;
  this.preTag = '<<<';
  this.postTag = '>>>';
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.preTag !== undefined) {
      this.preTag = args.preTag;
    }
    if (args.postTag !== undefined) {
      this.postTag = args.postTag;
    }
  }
};
HighlightOptions.prototype = {};
HighlightOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.preTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.postTag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HighlightOptions.prototype.write = function(output) {
  output.writeStructBegin('HighlightOptions');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  if (this.preTag !== null && this.preTag !== undefined) {
    output.writeFieldBegin('preTag', Thrift.Type.STRING, 2);
    output.writeString(this.preTag);
    output.writeFieldEnd();
  }
  if (this.postTag !== null && this.postTag !== undefined) {
    output.writeFieldBegin('postTag', Thrift.Type.STRING, 3);
    output.writeString(this.postTag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Selector = function(args) {
  this.recordOnly = null;
  this.locationId = null;
  this.rowId = null;
  this.recordId = null;
  this.columnFamiliesToFetch = null;
  this.columnsToFetch = null;
  this.startRecord = 0;
  this.maxRecordsToFetch = 1000;
  this.highlightOptions = null;
  this.orderOfFamiliesToFetch = null;
  if (args) {
    if (args.recordOnly !== undefined) {
      this.recordOnly = args.recordOnly;
    }
    if (args.locationId !== undefined) {
      this.locationId = args.locationId;
    }
    if (args.rowId !== undefined) {
      this.rowId = args.rowId;
    }
    if (args.recordId !== undefined) {
      this.recordId = args.recordId;
    }
    if (args.columnFamiliesToFetch !== undefined) {
      this.columnFamiliesToFetch = args.columnFamiliesToFetch;
    }
    if (args.columnsToFetch !== undefined) {
      this.columnsToFetch = args.columnsToFetch;
    }
    if (args.startRecord !== undefined) {
      this.startRecord = args.startRecord;
    }
    if (args.maxRecordsToFetch !== undefined) {
      this.maxRecordsToFetch = args.maxRecordsToFetch;
    }
    if (args.highlightOptions !== undefined) {
      this.highlightOptions = args.highlightOptions;
    }
    if (args.orderOfFamiliesToFetch !== undefined) {
      this.orderOfFamiliesToFetch = args.orderOfFamiliesToFetch;
    }
  }
};
Selector.prototype = {};
Selector.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.recordOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.locationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rowId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.recordId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size26 = 0;
        var _rtmp330;
        this.columnFamiliesToFetch = [];
        var _etype29 = 0;
        _rtmp330 = input.readSetBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString().value;
          this.columnFamiliesToFetch.push(elem32);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size33 = 0;
        var _rtmp337;
        this.columnsToFetch = {};
        var _ktype34 = 0;
        var _vtype35 = 0;
        _rtmp337 = input.readMapBegin();
        _ktype34 = _rtmp337.ktype;
        _vtype35 = _rtmp337.vtype;
        _size33 = _rtmp337.size;
        for (var _i38 = 0; _i38 < _size33; ++_i38)
        {
          if (_i38 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key39 = null;
          var val40 = null;
          key39 = input.readString().value;
          var _size41 = 0;
          var _rtmp345;
          val40 = [];
          var _etype44 = 0;
          _rtmp345 = input.readSetBegin();
          _etype44 = _rtmp345.etype;
          _size41 = _rtmp345.size;
          for (var _i46 = 0; _i46 < _size41; ++_i46)
          {
            var elem47 = null;
            elem47 = input.readString().value;
            val40.push(elem47);
          }
          input.readSetEnd();
          this.columnsToFetch[key39] = val40;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.startRecord = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.maxRecordsToFetch = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.highlightOptions = new HighlightOptions();
        this.highlightOptions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.orderOfFamiliesToFetch = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString().value;
          this.orderOfFamiliesToFetch.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Selector.prototype.write = function(output) {
  output.writeStructBegin('Selector');
  if (this.recordOnly !== null && this.recordOnly !== undefined) {
    output.writeFieldBegin('recordOnly', Thrift.Type.BOOL, 1);
    output.writeBool(this.recordOnly);
    output.writeFieldEnd();
  }
  if (this.locationId !== null && this.locationId !== undefined) {
    output.writeFieldBegin('locationId', Thrift.Type.STRING, 2);
    output.writeString(this.locationId);
    output.writeFieldEnd();
  }
  if (this.rowId !== null && this.rowId !== undefined) {
    output.writeFieldBegin('rowId', Thrift.Type.STRING, 3);
    output.writeString(this.rowId);
    output.writeFieldEnd();
  }
  if (this.recordId !== null && this.recordId !== undefined) {
    output.writeFieldBegin('recordId', Thrift.Type.STRING, 4);
    output.writeString(this.recordId);
    output.writeFieldEnd();
  }
  if (this.columnFamiliesToFetch !== null && this.columnFamiliesToFetch !== undefined) {
    output.writeFieldBegin('columnFamiliesToFetch', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRING, this.columnFamiliesToFetch.length);
    for (var iter55 in this.columnFamiliesToFetch)
    {
      if (this.columnFamiliesToFetch.hasOwnProperty(iter55))
      {
        iter55 = this.columnFamiliesToFetch[iter55];
        output.writeString(iter55);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.columnsToFetch !== null && this.columnsToFetch !== undefined) {
    output.writeFieldBegin('columnsToFetch', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.columnsToFetch));
    for (var kiter56 in this.columnsToFetch)
    {
      if (this.columnsToFetch.hasOwnProperty(kiter56))
      {
        var viter57 = this.columnsToFetch[kiter56];
        output.writeString(kiter56);
        output.writeSetBegin(Thrift.Type.STRING, viter57.length);
        for (var iter58 in viter57)
        {
          if (viter57.hasOwnProperty(iter58))
          {
            iter58 = viter57[iter58];
            output.writeString(iter58);
          }
        }
        output.writeSetEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.startRecord !== null && this.startRecord !== undefined) {
    output.writeFieldBegin('startRecord', Thrift.Type.I32, 8);
    output.writeI32(this.startRecord);
    output.writeFieldEnd();
  }
  if (this.maxRecordsToFetch !== null && this.maxRecordsToFetch !== undefined) {
    output.writeFieldBegin('maxRecordsToFetch', Thrift.Type.I32, 9);
    output.writeI32(this.maxRecordsToFetch);
    output.writeFieldEnd();
  }
  if (this.highlightOptions !== null && this.highlightOptions !== undefined) {
    output.writeFieldBegin('highlightOptions', Thrift.Type.STRUCT, 10);
    this.highlightOptions.write(output);
    output.writeFieldEnd();
  }
  if (this.orderOfFamiliesToFetch !== null && this.orderOfFamiliesToFetch !== undefined) {
    output.writeFieldBegin('orderOfFamiliesToFetch', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.orderOfFamiliesToFetch.length);
    for (var iter59 in this.orderOfFamiliesToFetch)
    {
      if (this.orderOfFamiliesToFetch.hasOwnProperty(iter59))
      {
        iter59 = this.orderOfFamiliesToFetch[iter59];
        output.writeString(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchRowResult = function(args) {
  this.row = null;
  this.startRecord = -1;
  this.maxRecordsToFetch = -1;
  this.moreRecordsToFetch = false;
  this.totalRecords = null;
  if (args) {
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.startRecord !== undefined) {
      this.startRecord = args.startRecord;
    }
    if (args.maxRecordsToFetch !== undefined) {
      this.maxRecordsToFetch = args.maxRecordsToFetch;
    }
    if (args.moreRecordsToFetch !== undefined) {
      this.moreRecordsToFetch = args.moreRecordsToFetch;
    }
    if (args.totalRecords !== undefined) {
      this.totalRecords = args.totalRecords;
    }
  }
};
FetchRowResult.prototype = {};
FetchRowResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.row = new Row();
        this.row.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startRecord = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.maxRecordsToFetch = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.moreRecordsToFetch = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.totalRecords = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchRowResult.prototype.write = function(output) {
  output.writeStructBegin('FetchRowResult');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRUCT, 1);
    this.row.write(output);
    output.writeFieldEnd();
  }
  if (this.startRecord !== null && this.startRecord !== undefined) {
    output.writeFieldBegin('startRecord', Thrift.Type.I32, 2);
    output.writeI32(this.startRecord);
    output.writeFieldEnd();
  }
  if (this.maxRecordsToFetch !== null && this.maxRecordsToFetch !== undefined) {
    output.writeFieldBegin('maxRecordsToFetch', Thrift.Type.I32, 3);
    output.writeI32(this.maxRecordsToFetch);
    output.writeFieldEnd();
  }
  if (this.moreRecordsToFetch !== null && this.moreRecordsToFetch !== undefined) {
    output.writeFieldBegin('moreRecordsToFetch', Thrift.Type.BOOL, 4);
    output.writeBool(this.moreRecordsToFetch);
    output.writeFieldEnd();
  }
  if (this.totalRecords !== null && this.totalRecords !== undefined) {
    output.writeFieldBegin('totalRecords', Thrift.Type.I32, 5);
    output.writeI32(this.totalRecords);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchRecordResult = function(args) {
  this.rowid = null;
  this.record = null;
  if (args) {
    if (args.rowid !== undefined) {
      this.rowid = args.rowid;
    }
    if (args.record !== undefined) {
      this.record = args.record;
    }
  }
};
FetchRecordResult.prototype = {};
FetchRecordResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.rowid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.record = new Record();
        this.record.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchRecordResult.prototype.write = function(output) {
  output.writeStructBegin('FetchRecordResult');
  if (this.rowid !== null && this.rowid !== undefined) {
    output.writeFieldBegin('rowid', Thrift.Type.STRING, 1);
    output.writeString(this.rowid);
    output.writeFieldEnd();
  }
  if (this.record !== null && this.record !== undefined) {
    output.writeFieldBegin('record', Thrift.Type.STRUCT, 2);
    this.record.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchResult = function(args) {
  this.exists = null;
  this.deleted = null;
  this.table = null;
  this.rowResult = null;
  this.recordResult = null;
  if (args) {
    if (args.exists !== undefined) {
      this.exists = args.exists;
    }
    if (args.deleted !== undefined) {
      this.deleted = args.deleted;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.rowResult !== undefined) {
      this.rowResult = args.rowResult;
    }
    if (args.recordResult !== undefined) {
      this.recordResult = args.recordResult;
    }
  }
};
FetchResult.prototype = {};
FetchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.exists = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.rowResult = new FetchRowResult();
        this.rowResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.recordResult = new FetchRecordResult();
        this.recordResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchResult.prototype.write = function(output) {
  output.writeStructBegin('FetchResult');
  if (this.exists !== null && this.exists !== undefined) {
    output.writeFieldBegin('exists', Thrift.Type.BOOL, 1);
    output.writeBool(this.exists);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleted);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 3);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.rowResult !== null && this.rowResult !== undefined) {
    output.writeFieldBegin('rowResult', Thrift.Type.STRUCT, 4);
    this.rowResult.write(output);
    output.writeFieldEnd();
  }
  if (this.recordResult !== null && this.recordResult !== undefined) {
    output.writeFieldBegin('recordResult', Thrift.Type.STRUCT, 5);
    this.recordResult.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Facet = function(args) {
  this.queryStr = null;
  this.minimumNumberOfBlurResults = 9223372036854775807;
  if (args) {
    if (args.queryStr !== undefined) {
      this.queryStr = args.queryStr;
    }
    if (args.minimumNumberOfBlurResults !== undefined) {
      this.minimumNumberOfBlurResults = args.minimumNumberOfBlurResults;
    }
  }
};
Facet.prototype = {};
Facet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.minimumNumberOfBlurResults = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Facet.prototype.write = function(output) {
  output.writeStructBegin('Facet');
  if (this.queryStr !== null && this.queryStr !== undefined) {
    output.writeFieldBegin('queryStr', Thrift.Type.STRING, 1);
    output.writeString(this.queryStr);
    output.writeFieldEnd();
  }
  if (this.minimumNumberOfBlurResults !== null && this.minimumNumberOfBlurResults !== undefined) {
    output.writeFieldBegin('minimumNumberOfBlurResults', Thrift.Type.I64, 2);
    output.writeI64(this.minimumNumberOfBlurResults);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SortField = function(args) {
  this.family = null;
  this.column = null;
  this.reverse = null;
  if (args) {
    if (args.family !== undefined) {
      this.family = args.family;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.reverse !== undefined) {
      this.reverse = args.reverse;
    }
  }
};
SortField.prototype = {};
SortField.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.reverse = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SortField.prototype.write = function(output) {
  output.writeStructBegin('SortField');
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 1);
    output.writeString(this.family);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 2);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.reverse !== null && this.reverse !== undefined) {
    output.writeFieldBegin('reverse', Thrift.Type.BOOL, 3);
    output.writeBool(this.reverse);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BlurQuery = function(args) {
  this.query = null;
  this.facets = null;
  this.selector = null;
  this.useCacheIfPresent = true;
  this.start = 0;
  this.fetch = 10;
  this.minimumNumberOfResults = 9223372036854775807;
  this.maxQueryTime = 9223372036854775807;
  this.uuid = null;
  this.userContext = null;
  this.cacheResult = true;
  this.startTime = 0;
  this.sortFields = null;
  this.rowId = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.facets !== undefined) {
      this.facets = args.facets;
    }
    if (args.selector !== undefined) {
      this.selector = args.selector;
    }
    if (args.useCacheIfPresent !== undefined) {
      this.useCacheIfPresent = args.useCacheIfPresent;
    }
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.fetch !== undefined) {
      this.fetch = args.fetch;
    }
    if (args.minimumNumberOfResults !== undefined) {
      this.minimumNumberOfResults = args.minimumNumberOfResults;
    }
    if (args.maxQueryTime !== undefined) {
      this.maxQueryTime = args.maxQueryTime;
    }
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.userContext !== undefined) {
      this.userContext = args.userContext;
    }
    if (args.cacheResult !== undefined) {
      this.cacheResult = args.cacheResult;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.sortFields !== undefined) {
      this.sortFields = args.sortFields;
    }
    if (args.rowId !== undefined) {
      this.rowId = args.rowId;
    }
  }
};
BlurQuery.prototype = {};
BlurQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.facets = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = new Facet();
          elem66.read(input);
          this.facets.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.selector = new Selector();
        this.selector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.useCacheIfPresent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.fetch = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.minimumNumberOfResults = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.maxQueryTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.userContext = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.cacheResult = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size67 = 0;
        var _rtmp371;
        this.sortFields = [];
        var _etype70 = 0;
        _rtmp371 = input.readListBegin();
        _etype70 = _rtmp371.etype;
        _size67 = _rtmp371.size;
        for (var _i72 = 0; _i72 < _size67; ++_i72)
        {
          var elem73 = null;
          elem73 = new SortField();
          elem73.read(input);
          this.sortFields.push(elem73);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.rowId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlurQuery.prototype.write = function(output) {
  output.writeStructBegin('BlurQuery');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  if (this.facets !== null && this.facets !== undefined) {
    output.writeFieldBegin('facets', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.facets.length);
    for (var iter74 in this.facets)
    {
      if (this.facets.hasOwnProperty(iter74))
      {
        iter74 = this.facets[iter74];
        iter74.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.STRUCT, 4);
    this.selector.write(output);
    output.writeFieldEnd();
  }
  if (this.useCacheIfPresent !== null && this.useCacheIfPresent !== undefined) {
    output.writeFieldBegin('useCacheIfPresent', Thrift.Type.BOOL, 6);
    output.writeBool(this.useCacheIfPresent);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 7);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.fetch !== null && this.fetch !== undefined) {
    output.writeFieldBegin('fetch', Thrift.Type.I32, 8);
    output.writeI32(this.fetch);
    output.writeFieldEnd();
  }
  if (this.minimumNumberOfResults !== null && this.minimumNumberOfResults !== undefined) {
    output.writeFieldBegin('minimumNumberOfResults', Thrift.Type.I64, 9);
    output.writeI64(this.minimumNumberOfResults);
    output.writeFieldEnd();
  }
  if (this.maxQueryTime !== null && this.maxQueryTime !== undefined) {
    output.writeFieldBegin('maxQueryTime', Thrift.Type.I64, 10);
    output.writeI64(this.maxQueryTime);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 11);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.userContext !== null && this.userContext !== undefined) {
    output.writeFieldBegin('userContext', Thrift.Type.STRING, 12);
    output.writeString(this.userContext);
    output.writeFieldEnd();
  }
  if (this.cacheResult !== null && this.cacheResult !== undefined) {
    output.writeFieldBegin('cacheResult', Thrift.Type.BOOL, 13);
    output.writeBool(this.cacheResult);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 14);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.sortFields !== null && this.sortFields !== undefined) {
    output.writeFieldBegin('sortFields', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRUCT, this.sortFields.length);
    for (var iter75 in this.sortFields)
    {
      if (this.sortFields.hasOwnProperty(iter75))
      {
        iter75 = this.sortFields[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rowId !== null && this.rowId !== undefined) {
    output.writeFieldBegin('rowId', Thrift.Type.STRING, 16);
    output.writeString(this.rowId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SortFieldResult = function(args) {
  this.nullValue = null;
  this.stringValue = null;
  this.intValue = null;
  this.longValue = null;
  this.doubleValue = null;
  this.binaryValue = null;
  if (args) {
    if (args.nullValue !== undefined) {
      this.nullValue = args.nullValue;
    }
    if (args.stringValue !== undefined) {
      this.stringValue = args.stringValue;
    }
    if (args.intValue !== undefined) {
      this.intValue = args.intValue;
    }
    if (args.longValue !== undefined) {
      this.longValue = args.longValue;
    }
    if (args.doubleValue !== undefined) {
      this.doubleValue = args.doubleValue;
    }
    if (args.binaryValue !== undefined) {
      this.binaryValue = args.binaryValue;
    }
  }
};
SortFieldResult.prototype = {};
SortFieldResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.nullValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.intValue = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.longValue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.binaryValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SortFieldResult.prototype.write = function(output) {
  output.writeStructBegin('SortFieldResult');
  if (this.nullValue !== null && this.nullValue !== undefined) {
    output.writeFieldBegin('nullValue', Thrift.Type.BOOL, 1);
    output.writeBool(this.nullValue);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 2);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.intValue !== null && this.intValue !== undefined) {
    output.writeFieldBegin('intValue', Thrift.Type.I32, 3);
    output.writeI32(this.intValue);
    output.writeFieldEnd();
  }
  if (this.longValue !== null && this.longValue !== undefined) {
    output.writeFieldBegin('longValue', Thrift.Type.I64, 4);
    output.writeI64(this.longValue);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.STRING, 6);
    output.writeString(this.binaryValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BlurResult = function(args) {
  this.locationId = null;
  this.score = null;
  this.fetchResult = null;
  this.sortFieldResults = null;
  if (args) {
    if (args.locationId !== undefined) {
      this.locationId = args.locationId;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.fetchResult !== undefined) {
      this.fetchResult = args.fetchResult;
    }
    if (args.sortFieldResults !== undefined) {
      this.sortFieldResults = args.sortFieldResults;
    }
  }
};
BlurResult.prototype = {};
BlurResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.locationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fetchResult = new FetchResult();
        this.fetchResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.sortFieldResults = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = new SortFieldResult();
          elem82.read(input);
          this.sortFieldResults.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlurResult.prototype.write = function(output) {
  output.writeStructBegin('BlurResult');
  if (this.locationId !== null && this.locationId !== undefined) {
    output.writeFieldBegin('locationId', Thrift.Type.STRING, 1);
    output.writeString(this.locationId);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  if (this.fetchResult !== null && this.fetchResult !== undefined) {
    output.writeFieldBegin('fetchResult', Thrift.Type.STRUCT, 3);
    this.fetchResult.write(output);
    output.writeFieldEnd();
  }
  if (this.sortFieldResults !== null && this.sortFieldResults !== undefined) {
    output.writeFieldBegin('sortFieldResults', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.sortFieldResults.length);
    for (var iter83 in this.sortFieldResults)
    {
      if (this.sortFieldResults.hasOwnProperty(iter83))
      {
        iter83 = this.sortFieldResults[iter83];
        iter83.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BlurResults = function(args) {
  this.totalResults = 0;
  this.shardInfo = null;
  this.results = null;
  this.facetCounts = null;
  this.exceptions = null;
  this.query = null;
  if (args) {
    if (args.totalResults !== undefined) {
      this.totalResults = args.totalResults;
    }
    if (args.shardInfo !== undefined) {
      this.shardInfo = args.shardInfo;
    }
    if (args.results !== undefined) {
      this.results = args.results;
    }
    if (args.facetCounts !== undefined) {
      this.facetCounts = args.facetCounts;
    }
    if (args.exceptions !== undefined) {
      this.exceptions = args.exceptions;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
BlurResults.prototype = {};
BlurResults.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.totalResults = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size84 = 0;
        var _rtmp388;
        this.shardInfo = {};
        var _ktype85 = 0;
        var _vtype86 = 0;
        _rtmp388 = input.readMapBegin();
        _ktype85 = _rtmp388.ktype;
        _vtype86 = _rtmp388.vtype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          if (_i89 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key90 = null;
          var val91 = null;
          key90 = input.readString().value;
          val91 = input.readI64().value;
          this.shardInfo[key90] = val91;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.results = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = new BlurResult();
          elem98.read(input);
          this.results.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size99 = 0;
        var _rtmp3103;
        this.facetCounts = [];
        var _etype102 = 0;
        _rtmp3103 = input.readListBegin();
        _etype102 = _rtmp3103.etype;
        _size99 = _rtmp3103.size;
        for (var _i104 = 0; _i104 < _size99; ++_i104)
        {
          var elem105 = null;
          elem105 = input.readI64().value;
          this.facetCounts.push(elem105);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size106 = 0;
        var _rtmp3110;
        this.exceptions = [];
        var _etype109 = 0;
        _rtmp3110 = input.readListBegin();
        _etype109 = _rtmp3110.etype;
        _size106 = _rtmp3110.size;
        for (var _i111 = 0; _i111 < _size106; ++_i111)
        {
          var elem112 = null;
          elem112 = new BlurException();
          elem112.read(input);
          this.exceptions.push(elem112);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new BlurQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlurResults.prototype.write = function(output) {
  output.writeStructBegin('BlurResults');
  if (this.totalResults !== null && this.totalResults !== undefined) {
    output.writeFieldBegin('totalResults', Thrift.Type.I64, 1);
    output.writeI64(this.totalResults);
    output.writeFieldEnd();
  }
  if (this.shardInfo !== null && this.shardInfo !== undefined) {
    output.writeFieldBegin('shardInfo', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.shardInfo));
    for (var kiter113 in this.shardInfo)
    {
      if (this.shardInfo.hasOwnProperty(kiter113))
      {
        var viter114 = this.shardInfo[kiter113];
        output.writeString(kiter113);
        output.writeI64(viter114);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.results.length);
    for (var iter115 in this.results)
    {
      if (this.results.hasOwnProperty(iter115))
      {
        iter115 = this.results[iter115];
        iter115.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.facetCounts !== null && this.facetCounts !== undefined) {
    output.writeFieldBegin('facetCounts', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I64, this.facetCounts.length);
    for (var iter116 in this.facetCounts)
    {
      if (this.facetCounts.hasOwnProperty(iter116))
      {
        iter116 = this.facetCounts[iter116];
        output.writeI64(iter116);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.exceptions !== null && this.exceptions !== undefined) {
    output.writeFieldBegin('exceptions', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.exceptions.length);
    for (var iter117 in this.exceptions)
    {
      if (this.exceptions.hasOwnProperty(iter117))
      {
        iter117 = this.exceptions[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 6);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecordMutation = function(args) {
  this.recordMutationType = 1;
  this.record = null;
  if (args) {
    if (args.recordMutationType !== undefined) {
      this.recordMutationType = args.recordMutationType;
    }
    if (args.record !== undefined) {
      this.record = args.record;
    }
  }
};
RecordMutation.prototype = {};
RecordMutation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.recordMutationType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.record = new Record();
        this.record.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecordMutation.prototype.write = function(output) {
  output.writeStructBegin('RecordMutation');
  if (this.recordMutationType !== null && this.recordMutationType !== undefined) {
    output.writeFieldBegin('recordMutationType', Thrift.Type.I32, 1);
    output.writeI32(this.recordMutationType);
    output.writeFieldEnd();
  }
  if (this.record !== null && this.record !== undefined) {
    output.writeFieldBegin('record', Thrift.Type.STRUCT, 2);
    this.record.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RowMutation = function(args) {
  this.table = null;
  this.rowId = null;
  this.rowMutationType = 1;
  this.recordMutations = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.rowId !== undefined) {
      this.rowId = args.rowId;
    }
    if (args.rowMutationType !== undefined) {
      this.rowMutationType = args.rowMutationType;
    }
    if (args.recordMutations !== undefined) {
      this.recordMutations = args.recordMutations;
    }
  }
};
RowMutation.prototype = {};
RowMutation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rowId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.rowMutationType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size118 = 0;
        var _rtmp3122;
        this.recordMutations = [];
        var _etype121 = 0;
        _rtmp3122 = input.readListBegin();
        _etype121 = _rtmp3122.etype;
        _size118 = _rtmp3122.size;
        for (var _i123 = 0; _i123 < _size118; ++_i123)
        {
          var elem124 = null;
          elem124 = new RecordMutation();
          elem124.read(input);
          this.recordMutations.push(elem124);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RowMutation.prototype.write = function(output) {
  output.writeStructBegin('RowMutation');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.rowId !== null && this.rowId !== undefined) {
    output.writeFieldBegin('rowId', Thrift.Type.STRING, 2);
    output.writeString(this.rowId);
    output.writeFieldEnd();
  }
  if (this.rowMutationType !== null && this.rowMutationType !== undefined) {
    output.writeFieldBegin('rowMutationType', Thrift.Type.I32, 4);
    output.writeI32(this.rowMutationType);
    output.writeFieldEnd();
  }
  if (this.recordMutations !== null && this.recordMutations !== undefined) {
    output.writeFieldBegin('recordMutations', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.recordMutations.length);
    for (var iter125 in this.recordMutations)
    {
      if (this.recordMutations.hasOwnProperty(iter125))
      {
        iter125 = this.recordMutations[iter125];
        iter125.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CpuTime = function(args) {
  this.cpuTime = null;
  this.realTime = null;
  if (args) {
    if (args.cpuTime !== undefined) {
      this.cpuTime = args.cpuTime;
    }
    if (args.realTime !== undefined) {
      this.realTime = args.realTime;
    }
  }
};
CpuTime.prototype = {};
CpuTime.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.cpuTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.realTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CpuTime.prototype.write = function(output) {
  output.writeStructBegin('CpuTime');
  if (this.cpuTime !== null && this.cpuTime !== undefined) {
    output.writeFieldBegin('cpuTime', Thrift.Type.I64, 1);
    output.writeI64(this.cpuTime);
    output.writeFieldEnd();
  }
  if (this.realTime !== null && this.realTime !== undefined) {
    output.writeFieldBegin('realTime', Thrift.Type.I64, 2);
    output.writeI64(this.realTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BlurQueryStatus = function(args) {
  this.query = null;
  this.cpuTimes = null;
  this.completeShards = null;
  this.totalShards = null;
  this.state = null;
  this.uuid = null;
  this.status = null;
  this.user = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
    if (args.cpuTimes !== undefined) {
      this.cpuTimes = args.cpuTimes;
    }
    if (args.completeShards !== undefined) {
      this.completeShards = args.completeShards;
    }
    if (args.totalShards !== undefined) {
      this.totalShards = args.totalShards;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
BlurQueryStatus.prototype = {};
BlurQueryStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new BlurQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size126 = 0;
        var _rtmp3130;
        this.cpuTimes = {};
        var _ktype127 = 0;
        var _vtype128 = 0;
        _rtmp3130 = input.readMapBegin();
        _ktype127 = _rtmp3130.ktype;
        _vtype128 = _rtmp3130.vtype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          if (_i131 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key132 = null;
          var val133 = null;
          key132 = input.readString().value;
          val133 = new CpuTime();
          val133.read(input);
          this.cpuTimes[key132] = val133;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.completeShards = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.totalShards = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlurQueryStatus.prototype.write = function(output) {
  output.writeStructBegin('BlurQueryStatus');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  if (this.cpuTimes !== null && this.cpuTimes !== undefined) {
    output.writeFieldBegin('cpuTimes', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.cpuTimes));
    for (var kiter134 in this.cpuTimes)
    {
      if (this.cpuTimes.hasOwnProperty(kiter134))
      {
        var viter135 = this.cpuTimes[kiter134];
        output.writeString(kiter134);
        viter135.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.completeShards !== null && this.completeShards !== undefined) {
    output.writeFieldBegin('completeShards', Thrift.Type.I32, 3);
    output.writeI32(this.completeShards);
    output.writeFieldEnd();
  }
  if (this.totalShards !== null && this.totalShards !== undefined) {
    output.writeFieldBegin('totalShards', Thrift.Type.I32, 4);
    output.writeI32(this.totalShards);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 5);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 6);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 8);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableStats = function(args) {
  this.tableName = null;
  this.bytes = null;
  this.recordCount = null;
  this.rowCount = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.bytes !== undefined) {
      this.bytes = args.bytes;
    }
    if (args.recordCount !== undefined) {
      this.recordCount = args.recordCount;
    }
    if (args.rowCount !== undefined) {
      this.rowCount = args.rowCount;
    }
  }
};
TableStats.prototype = {};
TableStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.bytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.recordCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.rowCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableStats.prototype.write = function(output) {
  output.writeStructBegin('TableStats');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.bytes !== null && this.bytes !== undefined) {
    output.writeFieldBegin('bytes', Thrift.Type.I64, 2);
    output.writeI64(this.bytes);
    output.writeFieldEnd();
  }
  if (this.recordCount !== null && this.recordCount !== undefined) {
    output.writeFieldBegin('recordCount', Thrift.Type.I64, 3);
    output.writeI64(this.recordCount);
    output.writeFieldEnd();
  }
  if (this.rowCount !== null && this.rowCount !== undefined) {
    output.writeFieldBegin('rowCount', Thrift.Type.I64, 4);
    output.writeI64(this.rowCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnDefinition = function(args) {
  this.family = null;
  this.columnName = null;
  this.subColumnName = null;
  this.fieldLessIndexed = null;
  this.fieldType = null;
  this.properties = null;
  this.sortable = null;
  this.multiValueField = true;
  if (args) {
    if (args.family !== undefined) {
      this.family = args.family;
    }
    if (args.columnName !== undefined) {
      this.columnName = args.columnName;
    }
    if (args.subColumnName !== undefined) {
      this.subColumnName = args.subColumnName;
    }
    if (args.fieldLessIndexed !== undefined) {
      this.fieldLessIndexed = args.fieldLessIndexed;
    }
    if (args.fieldType !== undefined) {
      this.fieldType = args.fieldType;
    }
    if (args.properties !== undefined) {
      this.properties = args.properties;
    }
    if (args.sortable !== undefined) {
      this.sortable = args.sortable;
    }
    if (args.multiValueField !== undefined) {
      this.multiValueField = args.multiValueField;
    }
  }
};
ColumnDefinition.prototype = {};
ColumnDefinition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.subColumnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.fieldLessIndexed = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.fieldType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size136 = 0;
        var _rtmp3140;
        this.properties = {};
        var _ktype137 = 0;
        var _vtype138 = 0;
        _rtmp3140 = input.readMapBegin();
        _ktype137 = _rtmp3140.ktype;
        _vtype138 = _rtmp3140.vtype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          if (_i141 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key142 = null;
          var val143 = null;
          key142 = input.readString().value;
          val143 = input.readString().value;
          this.properties[key142] = val143;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.sortable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.multiValueField = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnDefinition.prototype.write = function(output) {
  output.writeStructBegin('ColumnDefinition');
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 1);
    output.writeString(this.family);
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 2);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.subColumnName !== null && this.subColumnName !== undefined) {
    output.writeFieldBegin('subColumnName', Thrift.Type.STRING, 3);
    output.writeString(this.subColumnName);
    output.writeFieldEnd();
  }
  if (this.fieldLessIndexed !== null && this.fieldLessIndexed !== undefined) {
    output.writeFieldBegin('fieldLessIndexed', Thrift.Type.BOOL, 4);
    output.writeBool(this.fieldLessIndexed);
    output.writeFieldEnd();
  }
  if (this.fieldType !== null && this.fieldType !== undefined) {
    output.writeFieldBegin('fieldType', Thrift.Type.STRING, 5);
    output.writeString(this.fieldType);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.properties));
    for (var kiter144 in this.properties)
    {
      if (this.properties.hasOwnProperty(kiter144))
      {
        var viter145 = this.properties[kiter144];
        output.writeString(kiter144);
        output.writeString(viter145);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.sortable !== null && this.sortable !== undefined) {
    output.writeFieldBegin('sortable', Thrift.Type.BOOL, 7);
    output.writeBool(this.sortable);
    output.writeFieldEnd();
  }
  if (this.multiValueField !== null && this.multiValueField !== undefined) {
    output.writeFieldBegin('multiValueField', Thrift.Type.BOOL, 8);
    output.writeBool(this.multiValueField);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Schema = function(args) {
  this.table = null;
  this.families = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.families !== undefined) {
      this.families = args.families;
    }
  }
};
Schema.prototype = {};
Schema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size146 = 0;
        var _rtmp3150;
        this.families = {};
        var _ktype147 = 0;
        var _vtype148 = 0;
        _rtmp3150 = input.readMapBegin();
        _ktype147 = _rtmp3150.ktype;
        _vtype148 = _rtmp3150.vtype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          if (_i151 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key152 = null;
          var val153 = null;
          key152 = input.readString().value;
          var _size154 = 0;
          var _rtmp3158;
          val153 = {};
          var _ktype155 = 0;
          var _vtype156 = 0;
          _rtmp3158 = input.readMapBegin();
          _ktype155 = _rtmp3158.ktype;
          _vtype156 = _rtmp3158.vtype;
          _size154 = _rtmp3158.size;
          for (var _i159 = 0; _i159 < _size154; ++_i159)
          {
            if (_i159 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key160 = null;
            var val161 = null;
            key160 = input.readString().value;
            val161 = new ColumnDefinition();
            val161.read(input);
            val153[key160] = val161;
          }
          input.readMapEnd();
          this.families[key152] = val153;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Schema.prototype.write = function(output) {
  output.writeStructBegin('Schema');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.families !== null && this.families !== undefined) {
    output.writeFieldBegin('families', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.families));
    for (var kiter162 in this.families)
    {
      if (this.families.hasOwnProperty(kiter162))
      {
        var viter163 = this.families[kiter162];
        output.writeString(kiter162);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(viter163));
        for (var kiter164 in viter163)
        {
          if (viter163.hasOwnProperty(kiter164))
          {
            var viter165 = viter163[kiter164];
            output.writeString(kiter164);
            viter165.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableDescriptor = function(args) {
  this.enabled = true;
  this.shardCount = 1;
  this.tableUri = null;
  this.cluster = 'default';
  this.name = null;
  this.similarityClass = null;
  this.blockCaching = true;
  this.blockCachingFileTypes = null;
  this.readOnly = false;
  this.preCacheCols = null;
  this.tableProperties = null;
  this.strictTypes = false;
  this.defaultMissingFieldType = 'text';
  this.defaultMissingFieldLessIndexing = true;
  this.defaultMissingFieldProps = null;
  if (args) {
    if (args.enabled !== undefined) {
      this.enabled = args.enabled;
    }
    if (args.shardCount !== undefined) {
      this.shardCount = args.shardCount;
    }
    if (args.tableUri !== undefined) {
      this.tableUri = args.tableUri;
    }
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.similarityClass !== undefined) {
      this.similarityClass = args.similarityClass;
    }
    if (args.blockCaching !== undefined) {
      this.blockCaching = args.blockCaching;
    }
    if (args.blockCachingFileTypes !== undefined) {
      this.blockCachingFileTypes = args.blockCachingFileTypes;
    }
    if (args.readOnly !== undefined) {
      this.readOnly = args.readOnly;
    }
    if (args.preCacheCols !== undefined) {
      this.preCacheCols = args.preCacheCols;
    }
    if (args.tableProperties !== undefined) {
      this.tableProperties = args.tableProperties;
    }
    if (args.strictTypes !== undefined) {
      this.strictTypes = args.strictTypes;
    }
    if (args.defaultMissingFieldType !== undefined) {
      this.defaultMissingFieldType = args.defaultMissingFieldType;
    }
    if (args.defaultMissingFieldLessIndexing !== undefined) {
      this.defaultMissingFieldLessIndexing = args.defaultMissingFieldLessIndexing;
    }
    if (args.defaultMissingFieldProps !== undefined) {
      this.defaultMissingFieldProps = args.defaultMissingFieldProps;
    }
  }
};
TableDescriptor.prototype = {};
TableDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shardCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tableUri = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.similarityClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.blockCaching = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.SET) {
        var _size166 = 0;
        var _rtmp3170;
        this.blockCachingFileTypes = [];
        var _etype169 = 0;
        _rtmp3170 = input.readSetBegin();
        _etype169 = _rtmp3170.etype;
        _size166 = _rtmp3170.size;
        for (var _i171 = 0; _i171 < _size166; ++_i171)
        {
          var elem172 = null;
          elem172 = input.readString().value;
          this.blockCachingFileTypes.push(elem172);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.readOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size173 = 0;
        var _rtmp3177;
        this.preCacheCols = [];
        var _etype176 = 0;
        _rtmp3177 = input.readListBegin();
        _etype176 = _rtmp3177.etype;
        _size173 = _rtmp3177.size;
        for (var _i178 = 0; _i178 < _size173; ++_i178)
        {
          var elem179 = null;
          elem179 = input.readString().value;
          this.preCacheCols.push(elem179);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.MAP) {
        var _size180 = 0;
        var _rtmp3184;
        this.tableProperties = {};
        var _ktype181 = 0;
        var _vtype182 = 0;
        _rtmp3184 = input.readMapBegin();
        _ktype181 = _rtmp3184.ktype;
        _vtype182 = _rtmp3184.vtype;
        _size180 = _rtmp3184.size;
        for (var _i185 = 0; _i185 < _size180; ++_i185)
        {
          if (_i185 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key186 = null;
          var val187 = null;
          key186 = input.readString().value;
          val187 = input.readString().value;
          this.tableProperties[key186] = val187;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.strictTypes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.defaultMissingFieldType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.defaultMissingFieldLessIndexing = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.MAP) {
        var _size188 = 0;
        var _rtmp3192;
        this.defaultMissingFieldProps = {};
        var _ktype189 = 0;
        var _vtype190 = 0;
        _rtmp3192 = input.readMapBegin();
        _ktype189 = _rtmp3192.ktype;
        _vtype190 = _rtmp3192.vtype;
        _size188 = _rtmp3192.size;
        for (var _i193 = 0; _i193 < _size188; ++_i193)
        {
          if (_i193 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key194 = null;
          var val195 = null;
          key194 = input.readString().value;
          val195 = input.readString().value;
          this.defaultMissingFieldProps[key194] = val195;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableDescriptor.prototype.write = function(output) {
  output.writeStructBegin('TableDescriptor');
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 1);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.shardCount !== null && this.shardCount !== undefined) {
    output.writeFieldBegin('shardCount', Thrift.Type.I32, 3);
    output.writeI32(this.shardCount);
    output.writeFieldEnd();
  }
  if (this.tableUri !== null && this.tableUri !== undefined) {
    output.writeFieldBegin('tableUri', Thrift.Type.STRING, 4);
    output.writeString(this.tableUri);
    output.writeFieldEnd();
  }
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 7);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 8);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.similarityClass !== null && this.similarityClass !== undefined) {
    output.writeFieldBegin('similarityClass', Thrift.Type.STRING, 9);
    output.writeString(this.similarityClass);
    output.writeFieldEnd();
  }
  if (this.blockCaching !== null && this.blockCaching !== undefined) {
    output.writeFieldBegin('blockCaching', Thrift.Type.BOOL, 10);
    output.writeBool(this.blockCaching);
    output.writeFieldEnd();
  }
  if (this.blockCachingFileTypes !== null && this.blockCachingFileTypes !== undefined) {
    output.writeFieldBegin('blockCachingFileTypes', Thrift.Type.SET, 11);
    output.writeSetBegin(Thrift.Type.STRING, this.blockCachingFileTypes.length);
    for (var iter196 in this.blockCachingFileTypes)
    {
      if (this.blockCachingFileTypes.hasOwnProperty(iter196))
      {
        iter196 = this.blockCachingFileTypes[iter196];
        output.writeString(iter196);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.readOnly !== null && this.readOnly !== undefined) {
    output.writeFieldBegin('readOnly', Thrift.Type.BOOL, 12);
    output.writeBool(this.readOnly);
    output.writeFieldEnd();
  }
  if (this.preCacheCols !== null && this.preCacheCols !== undefined) {
    output.writeFieldBegin('preCacheCols', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.preCacheCols.length);
    for (var iter197 in this.preCacheCols)
    {
      if (this.preCacheCols.hasOwnProperty(iter197))
      {
        iter197 = this.preCacheCols[iter197];
        output.writeString(iter197);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tableProperties !== null && this.tableProperties !== undefined) {
    output.writeFieldBegin('tableProperties', Thrift.Type.MAP, 14);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.tableProperties));
    for (var kiter198 in this.tableProperties)
    {
      if (this.tableProperties.hasOwnProperty(kiter198))
      {
        var viter199 = this.tableProperties[kiter198];
        output.writeString(kiter198);
        output.writeString(viter199);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.strictTypes !== null && this.strictTypes !== undefined) {
    output.writeFieldBegin('strictTypes', Thrift.Type.BOOL, 15);
    output.writeBool(this.strictTypes);
    output.writeFieldEnd();
  }
  if (this.defaultMissingFieldType !== null && this.defaultMissingFieldType !== undefined) {
    output.writeFieldBegin('defaultMissingFieldType', Thrift.Type.STRING, 16);
    output.writeString(this.defaultMissingFieldType);
    output.writeFieldEnd();
  }
  if (this.defaultMissingFieldLessIndexing !== null && this.defaultMissingFieldLessIndexing !== undefined) {
    output.writeFieldBegin('defaultMissingFieldLessIndexing', Thrift.Type.BOOL, 17);
    output.writeBool(this.defaultMissingFieldLessIndexing);
    output.writeFieldEnd();
  }
  if (this.defaultMissingFieldProps !== null && this.defaultMissingFieldProps !== undefined) {
    output.writeFieldBegin('defaultMissingFieldProps', Thrift.Type.MAP, 18);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.defaultMissingFieldProps));
    for (var kiter200 in this.defaultMissingFieldProps)
    {
      if (this.defaultMissingFieldProps.hasOwnProperty(kiter200))
      {
        var viter201 = this.defaultMissingFieldProps[kiter200];
        output.writeString(kiter200);
        output.writeString(viter201);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Metric = function(args) {
  this.name = null;
  this.strMap = null;
  this.longMap = null;
  this.doubleMap = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.strMap !== undefined) {
      this.strMap = args.strMap;
    }
    if (args.longMap !== undefined) {
      this.longMap = args.longMap;
    }
    if (args.doubleMap !== undefined) {
      this.doubleMap = args.doubleMap;
    }
  }
};
Metric.prototype = {};
Metric.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size202 = 0;
        var _rtmp3206;
        this.strMap = {};
        var _ktype203 = 0;
        var _vtype204 = 0;
        _rtmp3206 = input.readMapBegin();
        _ktype203 = _rtmp3206.ktype;
        _vtype204 = _rtmp3206.vtype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          if (_i207 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key208 = null;
          var val209 = null;
          key208 = input.readString().value;
          val209 = input.readString().value;
          this.strMap[key208] = val209;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size210 = 0;
        var _rtmp3214;
        this.longMap = {};
        var _ktype211 = 0;
        var _vtype212 = 0;
        _rtmp3214 = input.readMapBegin();
        _ktype211 = _rtmp3214.ktype;
        _vtype212 = _rtmp3214.vtype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          if (_i215 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key216 = null;
          var val217 = null;
          key216 = input.readString().value;
          val217 = input.readI64().value;
          this.longMap[key216] = val217;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size218 = 0;
        var _rtmp3222;
        this.doubleMap = {};
        var _ktype219 = 0;
        var _vtype220 = 0;
        _rtmp3222 = input.readMapBegin();
        _ktype219 = _rtmp3222.ktype;
        _vtype220 = _rtmp3222.vtype;
        _size218 = _rtmp3222.size;
        for (var _i223 = 0; _i223 < _size218; ++_i223)
        {
          if (_i223 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key224 = null;
          var val225 = null;
          key224 = input.readString().value;
          val225 = input.readDouble().value;
          this.doubleMap[key224] = val225;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Metric.prototype.write = function(output) {
  output.writeStructBegin('Metric');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.strMap !== null && this.strMap !== undefined) {
    output.writeFieldBegin('strMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.strMap));
    for (var kiter226 in this.strMap)
    {
      if (this.strMap.hasOwnProperty(kiter226))
      {
        var viter227 = this.strMap[kiter226];
        output.writeString(kiter226);
        output.writeString(viter227);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.longMap !== null && this.longMap !== undefined) {
    output.writeFieldBegin('longMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.longMap));
    for (var kiter228 in this.longMap)
    {
      if (this.longMap.hasOwnProperty(kiter228))
      {
        var viter229 = this.longMap[kiter228];
        output.writeString(kiter228);
        output.writeI64(viter229);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.doubleMap !== null && this.doubleMap !== undefined) {
    output.writeFieldBegin('doubleMap', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.doubleMap));
    for (var kiter230 in this.doubleMap)
    {
      if (this.doubleMap.hasOwnProperty(kiter230))
      {
        var viter231 = this.doubleMap[kiter230];
        output.writeString(kiter230);
        output.writeDouble(viter231);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Value = function(args) {
  this.stringValue = null;
  this.intValue = null;
  this.shortValue = null;
  this.longValue = null;
  this.doubleValue = null;
  this.floatValue = null;
  this.binaryValue = null;
  this.booleanValue = null;
  this.nullValue = null;
  if (args) {
    if (args.stringValue !== undefined) {
      this.stringValue = args.stringValue;
    }
    if (args.intValue !== undefined) {
      this.intValue = args.intValue;
    }
    if (args.shortValue !== undefined) {
      this.shortValue = args.shortValue;
    }
    if (args.longValue !== undefined) {
      this.longValue = args.longValue;
    }
    if (args.doubleValue !== undefined) {
      this.doubleValue = args.doubleValue;
    }
    if (args.floatValue !== undefined) {
      this.floatValue = args.floatValue;
    }
    if (args.binaryValue !== undefined) {
      this.binaryValue = args.binaryValue;
    }
    if (args.booleanValue !== undefined) {
      this.booleanValue = args.booleanValue;
    }
    if (args.nullValue !== undefined) {
      this.nullValue = args.nullValue;
    }
  }
};
Value.prototype = {};
Value.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.intValue = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.shortValue = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.longValue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.floatValue = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.binaryValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.booleanValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.nullValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Value.prototype.write = function(output) {
  output.writeStructBegin('Value');
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 1);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.intValue !== null && this.intValue !== undefined) {
    output.writeFieldBegin('intValue', Thrift.Type.I32, 2);
    output.writeI32(this.intValue);
    output.writeFieldEnd();
  }
  if (this.shortValue !== null && this.shortValue !== undefined) {
    output.writeFieldBegin('shortValue', Thrift.Type.I16, 3);
    output.writeI16(this.shortValue);
    output.writeFieldEnd();
  }
  if (this.longValue !== null && this.longValue !== undefined) {
    output.writeFieldBegin('longValue', Thrift.Type.I64, 4);
    output.writeI64(this.longValue);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.floatValue !== null && this.floatValue !== undefined) {
    output.writeFieldBegin('floatValue', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.floatValue);
    output.writeFieldEnd();
  }
  if (this.binaryValue !== null && this.binaryValue !== undefined) {
    output.writeFieldBegin('binaryValue', Thrift.Type.STRING, 7);
    output.writeString(this.binaryValue);
    output.writeFieldEnd();
  }
  if (this.booleanValue !== null && this.booleanValue !== undefined) {
    output.writeFieldBegin('booleanValue', Thrift.Type.BOOL, 8);
    output.writeBool(this.booleanValue);
    output.writeFieldEnd();
  }
  if (this.nullValue !== null && this.nullValue !== undefined) {
    output.writeFieldBegin('nullValue', Thrift.Type.BOOL, 9);
    output.writeBool(this.nullValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Shard = function(args) {
  this.table = null;
  this.shard = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.shard !== undefined) {
      this.shard = args.shard;
    }
  }
};
Shard.prototype = {};
Shard.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shard = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Shard.prototype.write = function(output) {
  output.writeStructBegin('Shard');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.shard !== null && this.shard !== undefined) {
    output.writeFieldBegin('shard', Thrift.Type.STRING, 2);
    output.writeString(this.shard);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Server = function(args) {
  this.server = null;
  if (args) {
    if (args.server !== undefined) {
      this.server = args.server;
    }
  }
};
Server.prototype = {};
Server.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.server = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Server.prototype.write = function(output) {
  output.writeStructBegin('Server');
  if (this.server !== null && this.server !== undefined) {
    output.writeFieldBegin('server', Thrift.Type.STRING, 1);
    output.writeString(this.server);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BlurPackedObject = function(args) {
  this.parentId = null;
  this.type = null;
  this.value = null;
  if (args) {
    if (args.parentId !== undefined) {
      this.parentId = args.parentId;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
BlurPackedObject.prototype = {};
BlurPackedObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.parentId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new Value();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlurPackedObject.prototype.write = function(output) {
  output.writeStructBegin('BlurPackedObject');
  if (this.parentId !== null && this.parentId !== undefined) {
    output.writeFieldBegin('parentId', Thrift.Type.I32, 1);
    output.writeI32(this.parentId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 3);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ValueObject = function(args) {
  this.value = null;
  this.blurObject = null;
  if (args) {
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.blurObject !== undefined) {
      this.blurObject = args.blurObject;
    }
  }
};
ValueObject.prototype = {};
ValueObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new Value();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size232 = 0;
        var _rtmp3236;
        this.blurObject = [];
        var _etype235 = 0;
        _rtmp3236 = input.readListBegin();
        _etype235 = _rtmp3236.etype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          var elem238 = null;
          elem238 = new BlurPackedObject();
          elem238.read(input);
          this.blurObject.push(elem238);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ValueObject.prototype.write = function(output) {
  output.writeStructBegin('ValueObject');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 1);
    this.value.write(output);
    output.writeFieldEnd();
  }
  if (this.blurObject !== null && this.blurObject !== undefined) {
    output.writeFieldBegin('blurObject', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.blurObject.length);
    for (var iter239 in this.blurObject)
    {
      if (this.blurObject.hasOwnProperty(iter239))
      {
        iter239 = this.blurObject[iter239];
        iter239.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Response = function(args) {
  this.shardToValue = null;
  this.serverToValue = null;
  this.value = null;
  if (args) {
    if (args.shardToValue !== undefined) {
      this.shardToValue = args.shardToValue;
    }
    if (args.serverToValue !== undefined) {
      this.serverToValue = args.serverToValue;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Response.prototype = {};
Response.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size240 = 0;
        var _rtmp3244;
        this.shardToValue = {};
        var _ktype241 = 0;
        var _vtype242 = 0;
        _rtmp3244 = input.readMapBegin();
        _ktype241 = _rtmp3244.ktype;
        _vtype242 = _rtmp3244.vtype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          if (_i245 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key246 = null;
          var val247 = null;
          key246 = new Shard();
          key246.read(input);
          val247 = new ValueObject();
          val247.read(input);
          this.shardToValue[key246] = val247;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size248 = 0;
        var _rtmp3252;
        this.serverToValue = {};
        var _ktype249 = 0;
        var _vtype250 = 0;
        _rtmp3252 = input.readMapBegin();
        _ktype249 = _rtmp3252.ktype;
        _vtype250 = _rtmp3252.vtype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          if (_i253 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key254 = null;
          var val255 = null;
          key254 = new Server();
          key254.read(input);
          val255 = new ValueObject();
          val255.read(input);
          this.serverToValue[key254] = val255;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.value = new ValueObject();
        this.value.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Response.prototype.write = function(output) {
  output.writeStructBegin('Response');
  if (this.shardToValue !== null && this.shardToValue !== undefined) {
    output.writeFieldBegin('shardToValue', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRUCT, Thrift.objectLength(this.shardToValue));
    for (var kiter256 in this.shardToValue)
    {
      if (this.shardToValue.hasOwnProperty(kiter256))
      {
        var viter257 = this.shardToValue[kiter256];
        kiter256.write(output);
        viter257.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.serverToValue !== null && this.serverToValue !== undefined) {
    output.writeFieldBegin('serverToValue', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRUCT, Thrift.objectLength(this.serverToValue));
    for (var kiter258 in this.serverToValue)
    {
      if (this.serverToValue.hasOwnProperty(kiter258))
      {
        var viter259 = this.serverToValue[kiter258];
        kiter258.write(output);
        viter259.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRUCT, 3);
    this.value.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Arguments = function(args) {
  this.values = null;
  if (args) {
    if (args.values !== undefined) {
      this.values = args.values;
    }
  }
};
Arguments.prototype = {};
Arguments.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size260 = 0;
        var _rtmp3264;
        this.values = {};
        var _ktype261 = 0;
        var _vtype262 = 0;
        _rtmp3264 = input.readMapBegin();
        _ktype261 = _rtmp3264.ktype;
        _vtype262 = _rtmp3264.vtype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          if (_i265 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key266 = null;
          var val267 = null;
          key266 = input.readString().value;
          val267 = new ValueObject();
          val267.read(input);
          this.values[key266] = val267;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Arguments.prototype.write = function(output) {
  output.writeStructBegin('Arguments');
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.values));
    for (var kiter268 in this.values)
    {
      if (this.values.hasOwnProperty(kiter268))
      {
        var viter269 = this.values[kiter268];
        output.writeString(kiter268);
        viter269.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandStatus = function(args) {
  this.executionId = null;
  this.table = null;
  this.commandName = null;
  this.arguments = null;
  this.state = null;
  if (args) {
    if (args.executionId !== undefined) {
      this.executionId = args.executionId;
    }
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.commandName !== undefined) {
      this.commandName = args.commandName;
    }
    if (args.arguments !== undefined) {
      this.arguments = args.arguments;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
CommandStatus.prototype = {};
CommandStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.executionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.commandName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.arguments = new Arguments();
        this.arguments.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandStatus.prototype.write = function(output) {
  output.writeStructBegin('CommandStatus');
  if (this.executionId !== null && this.executionId !== undefined) {
    output.writeFieldBegin('executionId', Thrift.Type.STRING, 1);
    output.writeString(this.executionId);
    output.writeFieldEnd();
  }
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 2);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.commandName !== null && this.commandName !== undefined) {
    output.writeFieldBegin('commandName', Thrift.Type.STRING, 3);
    output.writeString(this.commandName);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.STRUCT, 4);
    this.arguments.write(output);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 5);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ArgumentDescriptor = function(args) {
  this.name = null;
  this.type = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
  }
};
ArgumentDescriptor.prototype = {};
ArgumentDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArgumentDescriptor.prototype.write = function(output) {
  output.writeStructBegin('ArgumentDescriptor');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandDescriptor = function(args) {
  this.commandName = null;
  this.description = null;
  this.requiredArguments = null;
  this.optionalArguments = null;
  this.returnType = null;
  this.version = null;
  if (args) {
    if (args.commandName !== undefined) {
      this.commandName = args.commandName;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.requiredArguments !== undefined) {
      this.requiredArguments = args.requiredArguments;
    }
    if (args.optionalArguments !== undefined) {
      this.optionalArguments = args.optionalArguments;
    }
    if (args.returnType !== undefined) {
      this.returnType = args.returnType;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
  }
};
CommandDescriptor.prototype = {};
CommandDescriptor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.commandName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size270 = 0;
        var _rtmp3274;
        this.requiredArguments = {};
        var _ktype271 = 0;
        var _vtype272 = 0;
        _rtmp3274 = input.readMapBegin();
        _ktype271 = _rtmp3274.ktype;
        _vtype272 = _rtmp3274.vtype;
        _size270 = _rtmp3274.size;
        for (var _i275 = 0; _i275 < _size270; ++_i275)
        {
          if (_i275 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key276 = null;
          var val277 = null;
          key276 = input.readString().value;
          val277 = new ArgumentDescriptor();
          val277.read(input);
          this.requiredArguments[key276] = val277;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size278 = 0;
        var _rtmp3282;
        this.optionalArguments = {};
        var _ktype279 = 0;
        var _vtype280 = 0;
        _rtmp3282 = input.readMapBegin();
        _ktype279 = _rtmp3282.ktype;
        _vtype280 = _rtmp3282.vtype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          if (_i283 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key284 = null;
          var val285 = null;
          key284 = input.readString().value;
          val285 = new ArgumentDescriptor();
          val285.read(input);
          this.optionalArguments[key284] = val285;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.returnType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandDescriptor.prototype.write = function(output) {
  output.writeStructBegin('CommandDescriptor');
  if (this.commandName !== null && this.commandName !== undefined) {
    output.writeFieldBegin('commandName', Thrift.Type.STRING, 1);
    output.writeString(this.commandName);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.requiredArguments !== null && this.requiredArguments !== undefined) {
    output.writeFieldBegin('requiredArguments', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.requiredArguments));
    for (var kiter286 in this.requiredArguments)
    {
      if (this.requiredArguments.hasOwnProperty(kiter286))
      {
        var viter287 = this.requiredArguments[kiter286];
        output.writeString(kiter286);
        viter287.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.optionalArguments !== null && this.optionalArguments !== undefined) {
    output.writeFieldBegin('optionalArguments', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.optionalArguments));
    for (var kiter288 in this.optionalArguments)
    {
      if (this.optionalArguments.hasOwnProperty(kiter288))
      {
        var viter289 = this.optionalArguments[kiter288];
        output.writeString(kiter288);
        viter289.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.returnType !== null && this.returnType !== undefined) {
    output.writeFieldBegin('returnType', Thrift.Type.STRING, 5);
    output.writeString(this.returnType);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 6);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


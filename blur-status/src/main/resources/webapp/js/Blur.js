//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Blur_listInstalledCommands_args = function(args) {
};
Blur_listInstalledCommands_args.prototype = {};
Blur_listInstalledCommands_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_listInstalledCommands_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_listInstalledCommands_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_listInstalledCommands_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_listInstalledCommands_result.prototype = {};
Blur_listInstalledCommands_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size290 = 0;
        var _rtmp3294;
        this.success = [];
        var _etype293 = 0;
        _rtmp3294 = input.readListBegin();
        _etype293 = _rtmp3294.etype;
        _size290 = _rtmp3294.size;
        for (var _i295 = 0; _i295 < _size290; ++_i295)
        {
          var elem296 = null;
          elem296 = new CommandDescriptor();
          elem296.read(input);
          this.success.push(elem296);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_listInstalledCommands_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_listInstalledCommands_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter297 in this.success)
    {
      if (this.success.hasOwnProperty(iter297))
      {
        iter297 = this.success[iter297];
        iter297.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_execute_args = function(args) {
  this.commandName = null;
  this.arguments = null;
  if (args) {
    if (args.commandName !== undefined) {
      this.commandName = args.commandName;
    }
    if (args.arguments !== undefined) {
      this.arguments = args.arguments;
    }
  }
};
Blur_execute_args.prototype = {};
Blur_execute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.commandName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.arguments = new Arguments();
        this.arguments.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_execute_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_execute_args');
  if (this.commandName !== null && this.commandName !== undefined) {
    output.writeFieldBegin('commandName', Thrift.Type.STRING, 1);
    output.writeString(this.commandName);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.STRUCT, 2);
    this.arguments.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_execute_result = function(args) {
  this.success = null;
  this.bex = null;
  this.tex = null;
  if (args instanceof BlurException) {
    this.bex = args;
    return;
  }
  if (args instanceof TimeoutException) {
    this.tex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.bex !== undefined) {
      this.bex = args.bex;
    }
    if (args.tex !== undefined) {
      this.tex = args.tex;
    }
  }
};
Blur_execute_result.prototype = {};
Blur_execute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bex = new BlurException();
        this.bex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tex = new TimeoutException();
        this.tex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_execute_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_execute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.bex !== null && this.bex !== undefined) {
    output.writeFieldBegin('bex', Thrift.Type.STRUCT, 1);
    this.bex.write(output);
    output.writeFieldEnd();
  }
  if (this.tex !== null && this.tex !== undefined) {
    output.writeFieldBegin('tex', Thrift.Type.STRUCT, 2);
    this.tex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_reconnect_args = function(args) {
  this.instanceExecutionId = null;
  if (args) {
    if (args.instanceExecutionId !== undefined) {
      this.instanceExecutionId = args.instanceExecutionId;
    }
  }
};
Blur_reconnect_args.prototype = {};
Blur_reconnect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.instanceExecutionId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_reconnect_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_reconnect_args');
  if (this.instanceExecutionId !== null && this.instanceExecutionId !== undefined) {
    output.writeFieldBegin('instanceExecutionId', Thrift.Type.I64, 1);
    output.writeI64(this.instanceExecutionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_reconnect_result = function(args) {
  this.success = null;
  this.bex = null;
  this.tex = null;
  if (args instanceof BlurException) {
    this.bex = args;
    return;
  }
  if (args instanceof TimeoutException) {
    this.tex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.bex !== undefined) {
      this.bex = args.bex;
    }
    if (args.tex !== undefined) {
      this.tex = args.tex;
    }
  }
};
Blur_reconnect_result.prototype = {};
Blur_reconnect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bex = new BlurException();
        this.bex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tex = new TimeoutException();
        this.tex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_reconnect_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_reconnect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.bex !== null && this.bex !== undefined) {
    output.writeFieldBegin('bex', Thrift.Type.STRUCT, 1);
    this.bex.write(output);
    output.writeFieldEnd();
  }
  if (this.tex !== null && this.tex !== undefined) {
    output.writeFieldBegin('tex', Thrift.Type.STRUCT, 2);
    this.tex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_commandStatusList_args = function(args) {
  this.startingAt = null;
  this.fetch = null;
  this.state = null;
  if (args) {
    if (args.startingAt !== undefined) {
      this.startingAt = args.startingAt;
    }
    if (args.fetch !== undefined) {
      this.fetch = args.fetch;
    }
    if (args.state !== undefined) {
      this.state = args.state;
    }
  }
};
Blur_commandStatusList_args.prototype = {};
Blur_commandStatusList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startingAt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.fetch = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_commandStatusList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_commandStatusList_args');
  if (this.startingAt !== null && this.startingAt !== undefined) {
    output.writeFieldBegin('startingAt', Thrift.Type.I32, 1);
    output.writeI32(this.startingAt);
    output.writeFieldEnd();
  }
  if (this.fetch !== null && this.fetch !== undefined) {
    output.writeFieldBegin('fetch', Thrift.Type.I16, 2);
    output.writeI16(this.fetch);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_commandStatusList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_commandStatusList_result.prototype = {};
Blur_commandStatusList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size298 = 0;
        var _rtmp3302;
        this.success = [];
        var _etype301 = 0;
        _rtmp3302 = input.readListBegin();
        _etype301 = _rtmp3302.etype;
        _size298 = _rtmp3302.size;
        for (var _i303 = 0; _i303 < _size298; ++_i303)
        {
          var elem304 = null;
          elem304 = input.readString().value;
          this.success.push(elem304);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_commandStatusList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_commandStatusList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter305 in this.success)
    {
      if (this.success.hasOwnProperty(iter305))
      {
        iter305 = this.success[iter305];
        output.writeString(iter305);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_commandStatus_args = function(args) {
  this.commandExecutionId = null;
  if (args) {
    if (args.commandExecutionId !== undefined) {
      this.commandExecutionId = args.commandExecutionId;
    }
  }
};
Blur_commandStatus_args.prototype = {};
Blur_commandStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.commandExecutionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_commandStatus_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_commandStatus_args');
  if (this.commandExecutionId !== null && this.commandExecutionId !== undefined) {
    output.writeFieldBegin('commandExecutionId', Thrift.Type.STRING, 1);
    output.writeString(this.commandExecutionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_commandStatus_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_commandStatus_result.prototype = {};
Blur_commandStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CommandStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_commandStatus_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_commandStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_commandCancel_args = function(args) {
  this.commandExecutionId = null;
  if (args) {
    if (args.commandExecutionId !== undefined) {
      this.commandExecutionId = args.commandExecutionId;
    }
  }
};
Blur_commandCancel_args.prototype = {};
Blur_commandCancel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.commandExecutionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_commandCancel_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_commandCancel_args');
  if (this.commandExecutionId !== null && this.commandExecutionId !== undefined) {
    output.writeFieldBegin('commandExecutionId', Thrift.Type.STRING, 1);
    output.writeString(this.commandExecutionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_commandCancel_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_commandCancel_result.prototype = {};
Blur_commandCancel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_commandCancel_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_commandCancel_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_refresh_args = function(args) {
};
Blur_refresh_args.prototype = {};
Blur_refresh_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_refresh_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_refresh_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_refresh_result = function(args) {
};
Blur_refresh_result.prototype = {};
Blur_refresh_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_refresh_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_refresh_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_createTable_args = function(args) {
  this.tableDescriptor = null;
  if (args) {
    if (args.tableDescriptor !== undefined) {
      this.tableDescriptor = args.tableDescriptor;
    }
  }
};
Blur_createTable_args.prototype = {};
Blur_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableDescriptor = new TableDescriptor();
        this.tableDescriptor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_createTable_args');
  if (this.tableDescriptor !== null && this.tableDescriptor !== undefined) {
    output.writeFieldBegin('tableDescriptor', Thrift.Type.STRUCT, 1);
    this.tableDescriptor.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_createTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_createTable_result.prototype = {};
Blur_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_createTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enableTable_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_enableTable_args.prototype = {};
Blur_enableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_enableTable_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enableTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_enableTable_result.prototype = {};
Blur_enableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_enableTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_disableTable_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_disableTable_args.prototype = {};
Blur_disableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_disableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_disableTable_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_disableTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_disableTable_result.prototype = {};
Blur_disableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_disableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_disableTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_removeTable_args = function(args) {
  this.table = null;
  this.deleteIndexFiles = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.deleteIndexFiles !== undefined) {
      this.deleteIndexFiles = args.deleteIndexFiles;
    }
  }
};
Blur_removeTable_args.prototype = {};
Blur_removeTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteIndexFiles = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_removeTable_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_removeTable_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.deleteIndexFiles !== null && this.deleteIndexFiles !== undefined) {
    output.writeFieldBegin('deleteIndexFiles', Thrift.Type.BOOL, 2);
    output.writeBool(this.deleteIndexFiles);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_removeTable_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_removeTable_result.prototype = {};
Blur_removeTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_removeTable_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_removeTable_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_addColumnDefinition_args = function(args) {
  this.table = null;
  this.columnDefinition = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.columnDefinition !== undefined) {
      this.columnDefinition = args.columnDefinition;
    }
  }
};
Blur_addColumnDefinition_args.prototype = {};
Blur_addColumnDefinition_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.columnDefinition = new ColumnDefinition();
        this.columnDefinition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_addColumnDefinition_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_addColumnDefinition_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.columnDefinition !== null && this.columnDefinition !== undefined) {
    output.writeFieldBegin('columnDefinition', Thrift.Type.STRUCT, 2);
    this.columnDefinition.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_addColumnDefinition_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_addColumnDefinition_result.prototype = {};
Blur_addColumnDefinition_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_addColumnDefinition_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_addColumnDefinition_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableList_args = function(args) {
};
Blur_tableList_args.prototype = {};
Blur_tableList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_tableList_result.prototype = {};
Blur_tableList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size306 = 0;
        var _rtmp3310;
        this.success = [];
        var _etype309 = 0;
        _rtmp3310 = input.readListBegin();
        _etype309 = _rtmp3310.etype;
        _size306 = _rtmp3310.size;
        for (var _i311 = 0; _i311 < _size306; ++_i311)
        {
          var elem312 = null;
          elem312 = input.readString().value;
          this.success.push(elem312);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter313 in this.success)
    {
      if (this.success.hasOwnProperty(iter313))
      {
        iter313 = this.success[iter313];
        output.writeString(iter313);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableListByCluster_args = function(args) {
  this.cluster = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
  }
};
Blur_tableListByCluster_args.prototype = {};
Blur_tableListByCluster_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableListByCluster_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableListByCluster_args');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableListByCluster_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_tableListByCluster_result.prototype = {};
Blur_tableListByCluster_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size314 = 0;
        var _rtmp3318;
        this.success = [];
        var _etype317 = 0;
        _rtmp3318 = input.readListBegin();
        _etype317 = _rtmp3318.etype;
        _size314 = _rtmp3318.size;
        for (var _i319 = 0; _i319 < _size314; ++_i319)
        {
          var elem320 = null;
          elem320 = input.readString().value;
          this.success.push(elem320);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableListByCluster_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableListByCluster_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter321 in this.success)
    {
      if (this.success.hasOwnProperty(iter321))
      {
        iter321 = this.success[iter321];
        output.writeString(iter321);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_describe_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_describe_args.prototype = {};
Blur_describe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_describe_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_describe_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_describe_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_describe_result.prototype = {};
Blur_describe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TableDescriptor();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_describe_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_describe_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_schema_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_schema_args.prototype = {};
Blur_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_schema_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_schema_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_schema_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_schema_result.prototype = {};
Blur_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Schema();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_schema_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_schema_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_parseQuery_args = function(args) {
  this.table = null;
  this.query = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
Blur_parseQuery_args.prototype = {};
Blur_parseQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_parseQuery_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_parseQuery_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_parseQuery_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_parseQuery_result.prototype = {};
Blur_parseQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_parseQuery_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_parseQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableStats_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_tableStats_args.prototype = {};
Blur_tableStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableStats_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableStats_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_tableStats_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_tableStats_result.prototype = {};
Blur_tableStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TableStats();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_tableStats_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_tableStats_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_optimize_args = function(args) {
  this.table = null;
  this.numberOfSegmentsPerShard = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.numberOfSegmentsPerShard !== undefined) {
      this.numberOfSegmentsPerShard = args.numberOfSegmentsPerShard;
    }
  }
};
Blur_optimize_args.prototype = {};
Blur_optimize_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numberOfSegmentsPerShard = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_optimize_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_optimize_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.numberOfSegmentsPerShard !== null && this.numberOfSegmentsPerShard !== undefined) {
    output.writeFieldBegin('numberOfSegmentsPerShard', Thrift.Type.I32, 2);
    output.writeI32(this.numberOfSegmentsPerShard);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_optimize_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_optimize_result.prototype = {};
Blur_optimize_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_optimize_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_optimize_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_createSnapshot_args = function(args) {
  this.table = null;
  this.name = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
Blur_createSnapshot_args.prototype = {};
Blur_createSnapshot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_createSnapshot_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_createSnapshot_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_createSnapshot_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_createSnapshot_result.prototype = {};
Blur_createSnapshot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_createSnapshot_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_createSnapshot_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_removeSnapshot_args = function(args) {
  this.table = null;
  this.name = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
Blur_removeSnapshot_args.prototype = {};
Blur_removeSnapshot_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_removeSnapshot_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_removeSnapshot_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_removeSnapshot_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_removeSnapshot_result.prototype = {};
Blur_removeSnapshot_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_removeSnapshot_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_removeSnapshot_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_listSnapshots_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_listSnapshots_args.prototype = {};
Blur_listSnapshots_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_listSnapshots_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_listSnapshots_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_listSnapshots_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_listSnapshots_result.prototype = {};
Blur_listSnapshots_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size322 = 0;
        var _rtmp3326;
        this.success = {};
        var _ktype323 = 0;
        var _vtype324 = 0;
        _rtmp3326 = input.readMapBegin();
        _ktype323 = _rtmp3326.ktype;
        _vtype324 = _rtmp3326.vtype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          if (_i327 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key328 = null;
          var val329 = null;
          key328 = input.readString().value;
          var _size330 = 0;
          var _rtmp3334;
          val329 = [];
          var _etype333 = 0;
          _rtmp3334 = input.readListBegin();
          _etype333 = _rtmp3334.etype;
          _size330 = _rtmp3334.size;
          for (var _i335 = 0; _i335 < _size330; ++_i335)
          {
            var elem336 = null;
            elem336 = input.readString().value;
            val329.push(elem336);
          }
          input.readListEnd();
          this.success[key328] = val329;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_listSnapshots_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_listSnapshots_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter337 in this.success)
    {
      if (this.success.hasOwnProperty(kiter337))
      {
        var viter338 = this.success[kiter337];
        output.writeString(kiter337);
        output.writeListBegin(Thrift.Type.STRING, viter338.length);
        for (var iter339 in viter338)
        {
          if (viter338.hasOwnProperty(iter339))
          {
            iter339 = viter338[iter339];
            output.writeString(iter339);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_setUser_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
Blur_setUser_args.prototype = {};
Blur_setUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_setUser_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_setUser_args');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_setUser_result = function(args) {
};
Blur_setUser_result.prototype = {};
Blur_setUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_setUser_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_setUser_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_query_args = function(args) {
  this.table = null;
  this.blurQuery = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.blurQuery !== undefined) {
      this.blurQuery = args.blurQuery;
    }
  }
};
Blur_query_args.prototype = {};
Blur_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.blurQuery = new BlurQuery();
        this.blurQuery.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_query_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_query_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.blurQuery !== null && this.blurQuery !== undefined) {
    output.writeFieldBegin('blurQuery', Thrift.Type.STRUCT, 2);
    this.blurQuery.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_query_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_query_result.prototype = {};
Blur_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BlurResults();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_query_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_fetchRow_args = function(args) {
  this.table = null;
  this.selector = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.selector !== undefined) {
      this.selector = args.selector;
    }
  }
};
Blur_fetchRow_args.prototype = {};
Blur_fetchRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.selector = new Selector();
        this.selector.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_fetchRow_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_fetchRow_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.selector !== null && this.selector !== undefined) {
    output.writeFieldBegin('selector', Thrift.Type.STRUCT, 2);
    this.selector.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_fetchRow_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_fetchRow_result.prototype = {};
Blur_fetchRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FetchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_fetchRow_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_fetchRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_fetchRowBatch_args = function(args) {
  this.table = null;
  this.selectors = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.selectors !== undefined) {
      this.selectors = args.selectors;
    }
  }
};
Blur_fetchRowBatch_args.prototype = {};
Blur_fetchRowBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size340 = 0;
        var _rtmp3344;
        this.selectors = [];
        var _etype343 = 0;
        _rtmp3344 = input.readListBegin();
        _etype343 = _rtmp3344.etype;
        _size340 = _rtmp3344.size;
        for (var _i345 = 0; _i345 < _size340; ++_i345)
        {
          var elem346 = null;
          elem346 = new Selector();
          elem346.read(input);
          this.selectors.push(elem346);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_fetchRowBatch_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_fetchRowBatch_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.selectors !== null && this.selectors !== undefined) {
    output.writeFieldBegin('selectors', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.selectors.length);
    for (var iter347 in this.selectors)
    {
      if (this.selectors.hasOwnProperty(iter347))
      {
        iter347 = this.selectors[iter347];
        iter347.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_fetchRowBatch_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_fetchRowBatch_result.prototype = {};
Blur_fetchRowBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size348 = 0;
        var _rtmp3352;
        this.success = [];
        var _etype351 = 0;
        _rtmp3352 = input.readListBegin();
        _etype351 = _rtmp3352.etype;
        _size348 = _rtmp3352.size;
        for (var _i353 = 0; _i353 < _size348; ++_i353)
        {
          var elem354 = null;
          elem354 = new FetchResult();
          elem354.read(input);
          this.success.push(elem354);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_fetchRowBatch_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_fetchRowBatch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter355 in this.success)
    {
      if (this.success.hasOwnProperty(iter355))
      {
        iter355 = this.success[iter355];
        iter355.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_loadData_args = function(args) {
  this.table = null;
  this.location = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.location !== undefined) {
      this.location = args.location;
    }
  }
};
Blur_loadData_args.prototype = {};
Blur_loadData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_loadData_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_loadData_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 2);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_loadData_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_loadData_result.prototype = {};
Blur_loadData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_loadData_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_loadData_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutate_args = function(args) {
  this.mutation = null;
  if (args) {
    if (args.mutation !== undefined) {
      this.mutation = args.mutation;
    }
  }
};
Blur_mutate_args.prototype = {};
Blur_mutate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutation = new RowMutation();
        this.mutation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutate_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutate_args');
  if (this.mutation !== null && this.mutation !== undefined) {
    output.writeFieldBegin('mutation', Thrift.Type.STRUCT, 1);
    this.mutation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutate_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_mutate_result.prototype = {};
Blur_mutate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutate_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutate_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enqueueMutate_args = function(args) {
  this.mutation = null;
  if (args) {
    if (args.mutation !== undefined) {
      this.mutation = args.mutation;
    }
  }
};
Blur_enqueueMutate_args.prototype = {};
Blur_enqueueMutate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutation = new RowMutation();
        this.mutation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enqueueMutate_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_enqueueMutate_args');
  if (this.mutation !== null && this.mutation !== undefined) {
    output.writeFieldBegin('mutation', Thrift.Type.STRUCT, 1);
    this.mutation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enqueueMutate_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_enqueueMutate_result.prototype = {};
Blur_enqueueMutate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enqueueMutate_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_enqueueMutate_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutateBatch_args = function(args) {
  this.mutations = null;
  if (args) {
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
  }
};
Blur_mutateBatch_args.prototype = {};
Blur_mutateBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size356 = 0;
        var _rtmp3360;
        this.mutations = [];
        var _etype359 = 0;
        _rtmp3360 = input.readListBegin();
        _etype359 = _rtmp3360.etype;
        _size356 = _rtmp3360.size;
        for (var _i361 = 0; _i361 < _size356; ++_i361)
        {
          var elem362 = null;
          elem362 = new RowMutation();
          elem362.read(input);
          this.mutations.push(elem362);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutateBatch_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutateBatch_args');
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter363 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter363))
      {
        iter363 = this.mutations[iter363];
        iter363.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_mutateBatch_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_mutateBatch_result.prototype = {};
Blur_mutateBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_mutateBatch_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_mutateBatch_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enqueueMutateBatch_args = function(args) {
  this.mutations = null;
  if (args) {
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
  }
};
Blur_enqueueMutateBatch_args.prototype = {};
Blur_enqueueMutateBatch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size364 = 0;
        var _rtmp3368;
        this.mutations = [];
        var _etype367 = 0;
        _rtmp3368 = input.readListBegin();
        _etype367 = _rtmp3368.etype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          var elem370 = null;
          elem370 = new RowMutation();
          elem370.read(input);
          this.mutations.push(elem370);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enqueueMutateBatch_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_enqueueMutateBatch_args');
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter371 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter371))
      {
        iter371 = this.mutations[iter371];
        iter371.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_enqueueMutateBatch_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_enqueueMutateBatch_result.prototype = {};
Blur_enqueueMutateBatch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_enqueueMutateBatch_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_enqueueMutateBatch_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_bulkMutateStart_args = function(args) {
  this.bulkId = null;
  if (args) {
    if (args.bulkId !== undefined) {
      this.bulkId = args.bulkId;
    }
  }
};
Blur_bulkMutateStart_args.prototype = {};
Blur_bulkMutateStart_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bulkId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_bulkMutateStart_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_bulkMutateStart_args');
  if (this.bulkId !== null && this.bulkId !== undefined) {
    output.writeFieldBegin('bulkId', Thrift.Type.STRING, 1);
    output.writeString(this.bulkId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_bulkMutateStart_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_bulkMutateStart_result.prototype = {};
Blur_bulkMutateStart_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_bulkMutateStart_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_bulkMutateStart_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_bulkMutateAdd_args = function(args) {
  this.bulkId = null;
  this.rowMutation = null;
  if (args) {
    if (args.bulkId !== undefined) {
      this.bulkId = args.bulkId;
    }
    if (args.rowMutation !== undefined) {
      this.rowMutation = args.rowMutation;
    }
  }
};
Blur_bulkMutateAdd_args.prototype = {};
Blur_bulkMutateAdd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bulkId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rowMutation = new RowMutation();
        this.rowMutation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_bulkMutateAdd_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_bulkMutateAdd_args');
  if (this.bulkId !== null && this.bulkId !== undefined) {
    output.writeFieldBegin('bulkId', Thrift.Type.STRING, 1);
    output.writeString(this.bulkId);
    output.writeFieldEnd();
  }
  if (this.rowMutation !== null && this.rowMutation !== undefined) {
    output.writeFieldBegin('rowMutation', Thrift.Type.STRUCT, 2);
    this.rowMutation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_bulkMutateAdd_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_bulkMutateAdd_result.prototype = {};
Blur_bulkMutateAdd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_bulkMutateAdd_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_bulkMutateAdd_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_bulkMutateAddMultiple_args = function(args) {
  this.bulkId = null;
  this.rowMutations = null;
  if (args) {
    if (args.bulkId !== undefined) {
      this.bulkId = args.bulkId;
    }
    if (args.rowMutations !== undefined) {
      this.rowMutations = args.rowMutations;
    }
  }
};
Blur_bulkMutateAddMultiple_args.prototype = {};
Blur_bulkMutateAddMultiple_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bulkId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size372 = 0;
        var _rtmp3376;
        this.rowMutations = [];
        var _etype375 = 0;
        _rtmp3376 = input.readListBegin();
        _etype375 = _rtmp3376.etype;
        _size372 = _rtmp3376.size;
        for (var _i377 = 0; _i377 < _size372; ++_i377)
        {
          var elem378 = null;
          elem378 = new RowMutation();
          elem378.read(input);
          this.rowMutations.push(elem378);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_bulkMutateAddMultiple_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_bulkMutateAddMultiple_args');
  if (this.bulkId !== null && this.bulkId !== undefined) {
    output.writeFieldBegin('bulkId', Thrift.Type.STRING, 1);
    output.writeString(this.bulkId);
    output.writeFieldEnd();
  }
  if (this.rowMutations !== null && this.rowMutations !== undefined) {
    output.writeFieldBegin('rowMutations', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowMutations.length);
    for (var iter379 in this.rowMutations)
    {
      if (this.rowMutations.hasOwnProperty(iter379))
      {
        iter379 = this.rowMutations[iter379];
        iter379.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_bulkMutateAddMultiple_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_bulkMutateAddMultiple_result.prototype = {};
Blur_bulkMutateAddMultiple_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_bulkMutateAddMultiple_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_bulkMutateAddMultiple_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_bulkMutateFinish_args = function(args) {
  this.bulkId = null;
  this.apply = null;
  this.blockUntilComplete = null;
  if (args) {
    if (args.bulkId !== undefined) {
      this.bulkId = args.bulkId;
    }
    if (args.apply !== undefined) {
      this.apply = args.apply;
    }
    if (args.blockUntilComplete !== undefined) {
      this.blockUntilComplete = args.blockUntilComplete;
    }
  }
};
Blur_bulkMutateFinish_args.prototype = {};
Blur_bulkMutateFinish_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bulkId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.apply = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.blockUntilComplete = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_bulkMutateFinish_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_bulkMutateFinish_args');
  if (this.bulkId !== null && this.bulkId !== undefined) {
    output.writeFieldBegin('bulkId', Thrift.Type.STRING, 1);
    output.writeString(this.bulkId);
    output.writeFieldEnd();
  }
  if (this.apply !== null && this.apply !== undefined) {
    output.writeFieldBegin('apply', Thrift.Type.BOOL, 2);
    output.writeBool(this.apply);
    output.writeFieldEnd();
  }
  if (this.blockUntilComplete !== null && this.blockUntilComplete !== undefined) {
    output.writeFieldBegin('blockUntilComplete', Thrift.Type.BOOL, 3);
    output.writeBool(this.blockUntilComplete);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_bulkMutateFinish_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_bulkMutateFinish_result.prototype = {};
Blur_bulkMutateFinish_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_bulkMutateFinish_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_bulkMutateFinish_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_cancelQuery_args = function(args) {
  this.table = null;
  this.uuid = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
  }
};
Blur_cancelQuery_args.prototype = {};
Blur_cancelQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_cancelQuery_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_cancelQuery_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 2);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_cancelQuery_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_cancelQuery_result.prototype = {};
Blur_cancelQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_cancelQuery_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_cancelQuery_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusIdList_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_queryStatusIdList_args.prototype = {};
Blur_queryStatusIdList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusIdList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusIdList_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusIdList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_queryStatusIdList_result.prototype = {};
Blur_queryStatusIdList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size380 = 0;
        var _rtmp3384;
        this.success = [];
        var _etype383 = 0;
        _rtmp3384 = input.readListBegin();
        _etype383 = _rtmp3384.etype;
        _size380 = _rtmp3384.size;
        for (var _i385 = 0; _i385 < _size380; ++_i385)
        {
          var elem386 = null;
          elem386 = input.readString().value;
          this.success.push(elem386);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusIdList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusIdList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter387 in this.success)
    {
      if (this.success.hasOwnProperty(iter387))
      {
        iter387 = this.success[iter387];
        output.writeString(iter387);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusById_args = function(args) {
  this.table = null;
  this.uuid = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
  }
};
Blur_queryStatusById_args.prototype = {};
Blur_queryStatusById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusById_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusById_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 2);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_queryStatusById_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_queryStatusById_result.prototype = {};
Blur_queryStatusById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new BlurQueryStatus();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_queryStatusById_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_queryStatusById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_terms_args = function(args) {
  this.table = null;
  this.columnFamily = null;
  this.columnName = null;
  this.startWith = null;
  this.size = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.columnFamily !== undefined) {
      this.columnFamily = args.columnFamily;
    }
    if (args.columnName !== undefined) {
      this.columnName = args.columnName;
    }
    if (args.startWith !== undefined) {
      this.startWith = args.startWith;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
  }
};
Blur_terms_args.prototype = {};
Blur_terms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.columnFamily = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startWith = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.size = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_terms_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_terms_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.columnFamily !== null && this.columnFamily !== undefined) {
    output.writeFieldBegin('columnFamily', Thrift.Type.STRING, 2);
    output.writeString(this.columnFamily);
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 3);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.startWith !== null && this.startWith !== undefined) {
    output.writeFieldBegin('startWith', Thrift.Type.STRING, 4);
    output.writeString(this.startWith);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I16, 5);
    output.writeI16(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_terms_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_terms_result.prototype = {};
Blur_terms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size388 = 0;
        var _rtmp3392;
        this.success = [];
        var _etype391 = 0;
        _rtmp3392 = input.readListBegin();
        _etype391 = _rtmp3392.etype;
        _size388 = _rtmp3392.size;
        for (var _i393 = 0; _i393 < _size388; ++_i393)
        {
          var elem394 = null;
          elem394 = input.readString().value;
          this.success.push(elem394);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_terms_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_terms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter395 in this.success)
    {
      if (this.success.hasOwnProperty(iter395))
      {
        iter395 = this.success[iter395];
        output.writeString(iter395);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_recordFrequency_args = function(args) {
  this.table = null;
  this.columnFamily = null;
  this.columnName = null;
  this.value = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
    if (args.columnFamily !== undefined) {
      this.columnFamily = args.columnFamily;
    }
    if (args.columnName !== undefined) {
      this.columnName = args.columnName;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Blur_recordFrequency_args.prototype = {};
Blur_recordFrequency_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.columnFamily = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_recordFrequency_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_recordFrequency_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  if (this.columnFamily !== null && this.columnFamily !== undefined) {
    output.writeFieldBegin('columnFamily', Thrift.Type.STRING, 2);
    output.writeString(this.columnFamily);
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 3);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_recordFrequency_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_recordFrequency_result.prototype = {};
Blur_recordFrequency_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_recordFrequency_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_recordFrequency_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardClusterList_args = function(args) {
};
Blur_shardClusterList_args.prototype = {};
Blur_shardClusterList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardClusterList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardClusterList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardClusterList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardClusterList_result.prototype = {};
Blur_shardClusterList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size396 = 0;
        var _rtmp3400;
        this.success = [];
        var _etype399 = 0;
        _rtmp3400 = input.readListBegin();
        _etype399 = _rtmp3400.etype;
        _size396 = _rtmp3400.size;
        for (var _i401 = 0; _i401 < _size396; ++_i401)
        {
          var elem402 = null;
          elem402 = input.readString().value;
          this.success.push(elem402);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardClusterList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardClusterList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter403 in this.success)
    {
      if (this.success.hasOwnProperty(iter403))
      {
        iter403 = this.success[iter403];
        output.writeString(iter403);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerList_args = function(args) {
  this.cluster = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
  }
};
Blur_shardServerList_args.prototype = {};
Blur_shardServerList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerList_args');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardServerList_result.prototype = {};
Blur_shardServerList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size404 = 0;
        var _rtmp3408;
        this.success = [];
        var _etype407 = 0;
        _rtmp3408 = input.readListBegin();
        _etype407 = _rtmp3408.etype;
        _size404 = _rtmp3408.size;
        for (var _i409 = 0; _i409 < _size404; ++_i409)
        {
          var elem410 = null;
          elem410 = input.readString().value;
          this.success.push(elem410);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter411 in this.success)
    {
      if (this.success.hasOwnProperty(iter411))
      {
        iter411 = this.success[iter411];
        output.writeString(iter411);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_controllerServerList_args = function(args) {
};
Blur_controllerServerList_args.prototype = {};
Blur_controllerServerList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_controllerServerList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_controllerServerList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_controllerServerList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_controllerServerList_result.prototype = {};
Blur_controllerServerList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size412 = 0;
        var _rtmp3416;
        this.success = [];
        var _etype415 = 0;
        _rtmp3416 = input.readListBegin();
        _etype415 = _rtmp3416.etype;
        _size412 = _rtmp3416.size;
        for (var _i417 = 0; _i417 < _size412; ++_i417)
        {
          var elem418 = null;
          elem418 = input.readString().value;
          this.success.push(elem418);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_controllerServerList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_controllerServerList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter419 in this.success)
    {
      if (this.success.hasOwnProperty(iter419))
      {
        iter419 = this.success[iter419];
        output.writeString(iter419);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayout_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_shardServerLayout_args.prototype = {};
Blur_shardServerLayout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayout_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayout_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayout_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardServerLayout_result.prototype = {};
Blur_shardServerLayout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size420 = 0;
        var _rtmp3424;
        this.success = {};
        var _ktype421 = 0;
        var _vtype422 = 0;
        _rtmp3424 = input.readMapBegin();
        _ktype421 = _rtmp3424.ktype;
        _vtype422 = _rtmp3424.vtype;
        _size420 = _rtmp3424.size;
        for (var _i425 = 0; _i425 < _size420; ++_i425)
        {
          if (_i425 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key426 = null;
          var val427 = null;
          key426 = input.readString().value;
          val427 = input.readString().value;
          this.success[key426] = val427;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayout_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter428 in this.success)
    {
      if (this.success.hasOwnProperty(kiter428))
      {
        var viter429 = this.success[kiter428];
        output.writeString(kiter428);
        output.writeString(viter429);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayoutState_args = function(args) {
  this.table = null;
  if (args) {
    if (args.table !== undefined) {
      this.table = args.table;
    }
  }
};
Blur_shardServerLayoutState_args.prototype = {};
Blur_shardServerLayoutState_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.table = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayoutState_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayoutState_args');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRING, 1);
    output.writeString(this.table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_shardServerLayoutState_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_shardServerLayoutState_result.prototype = {};
Blur_shardServerLayoutState_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size430 = 0;
        var _rtmp3434;
        this.success = {};
        var _ktype431 = 0;
        var _vtype432 = 0;
        _rtmp3434 = input.readMapBegin();
        _ktype431 = _rtmp3434.ktype;
        _vtype432 = _rtmp3434.vtype;
        _size430 = _rtmp3434.size;
        for (var _i435 = 0; _i435 < _size430; ++_i435)
        {
          if (_i435 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key436 = null;
          var val437 = null;
          key436 = input.readString().value;
          var _size438 = 0;
          var _rtmp3442;
          val437 = {};
          var _ktype439 = 0;
          var _vtype440 = 0;
          _rtmp3442 = input.readMapBegin();
          _ktype439 = _rtmp3442.ktype;
          _vtype440 = _rtmp3442.vtype;
          _size438 = _rtmp3442.size;
          for (var _i443 = 0; _i443 < _size438; ++_i443)
          {
            if (_i443 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key444 = null;
            var val445 = null;
            key444 = input.readString().value;
            val445 = input.readI32().value;
            val437[key444] = val445;
          }
          input.readMapEnd();
          this.success[key436] = val437;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_shardServerLayoutState_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_shardServerLayoutState_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.success));
    for (var kiter446 in this.success)
    {
      if (this.success.hasOwnProperty(kiter446))
      {
        var viter447 = this.success[kiter446];
        output.writeString(kiter446);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I32, Thrift.objectLength(viter447));
        for (var kiter448 in viter447)
        {
          if (viter447.hasOwnProperty(kiter448))
          {
            var viter449 = viter447[kiter448];
            output.writeString(kiter448);
            output.writeI32(viter449);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_isInSafeMode_args = function(args) {
  this.cluster = null;
  if (args) {
    if (args.cluster !== undefined) {
      this.cluster = args.cluster;
    }
  }
};
Blur_isInSafeMode_args.prototype = {};
Blur_isInSafeMode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cluster = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_isInSafeMode_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_isInSafeMode_args');
  if (this.cluster !== null && this.cluster !== undefined) {
    output.writeFieldBegin('cluster', Thrift.Type.STRING, 1);
    output.writeString(this.cluster);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_isInSafeMode_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_isInSafeMode_result.prototype = {};
Blur_isInSafeMode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_isInSafeMode_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_isInSafeMode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_configuration_args = function(args) {
};
Blur_configuration_args.prototype = {};
Blur_configuration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_configuration_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_configuration_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_configuration_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_configuration_result.prototype = {};
Blur_configuration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size450 = 0;
        var _rtmp3454;
        this.success = {};
        var _ktype451 = 0;
        var _vtype452 = 0;
        _rtmp3454 = input.readMapBegin();
        _ktype451 = _rtmp3454.ktype;
        _vtype452 = _rtmp3454.vtype;
        _size450 = _rtmp3454.size;
        for (var _i455 = 0; _i455 < _size450; ++_i455)
        {
          if (_i455 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key456 = null;
          var val457 = null;
          key456 = input.readString().value;
          val457 = input.readString().value;
          this.success[key456] = val457;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_configuration_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_configuration_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter458 in this.success)
    {
      if (this.success.hasOwnProperty(kiter458))
      {
        var viter459 = this.success[kiter458];
        output.writeString(kiter458);
        output.writeString(viter459);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_configurationPerServer_args = function(args) {
  this.thriftServerPlusPort = null;
  this.configName = null;
  if (args) {
    if (args.thriftServerPlusPort !== undefined) {
      this.thriftServerPlusPort = args.thriftServerPlusPort;
    }
    if (args.configName !== undefined) {
      this.configName = args.configName;
    }
  }
};
Blur_configurationPerServer_args.prototype = {};
Blur_configurationPerServer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.thriftServerPlusPort = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.configName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_configurationPerServer_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_configurationPerServer_args');
  if (this.thriftServerPlusPort !== null && this.thriftServerPlusPort !== undefined) {
    output.writeFieldBegin('thriftServerPlusPort', Thrift.Type.STRING, 1);
    output.writeString(this.thriftServerPlusPort);
    output.writeFieldEnd();
  }
  if (this.configName !== null && this.configName !== undefined) {
    output.writeFieldBegin('configName', Thrift.Type.STRING, 2);
    output.writeString(this.configName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_configurationPerServer_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_configurationPerServer_result.prototype = {};
Blur_configurationPerServer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_configurationPerServer_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_configurationPerServer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_metrics_args = function(args) {
  this.metrics = null;
  if (args) {
    if (args.metrics !== undefined) {
      this.metrics = args.metrics;
    }
  }
};
Blur_metrics_args.prototype = {};
Blur_metrics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size460 = 0;
        var _rtmp3464;
        this.metrics = [];
        var _etype463 = 0;
        _rtmp3464 = input.readSetBegin();
        _etype463 = _rtmp3464.etype;
        _size460 = _rtmp3464.size;
        for (var _i465 = 0; _i465 < _size460; ++_i465)
        {
          var elem466 = null;
          elem466 = input.readString().value;
          this.metrics.push(elem466);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_metrics_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_metrics_args');
  if (this.metrics !== null && this.metrics !== undefined) {
    output.writeFieldBegin('metrics', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.metrics.length);
    for (var iter467 in this.metrics)
    {
      if (this.metrics.hasOwnProperty(iter467))
      {
        iter467 = this.metrics[iter467];
        output.writeString(iter467);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_metrics_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_metrics_result.prototype = {};
Blur_metrics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size468 = 0;
        var _rtmp3472;
        this.success = {};
        var _ktype469 = 0;
        var _vtype470 = 0;
        _rtmp3472 = input.readMapBegin();
        _ktype469 = _rtmp3472.ktype;
        _vtype470 = _rtmp3472.vtype;
        _size468 = _rtmp3472.size;
        for (var _i473 = 0; _i473 < _size468; ++_i473)
        {
          if (_i473 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key474 = null;
          var val475 = null;
          key474 = input.readString().value;
          val475 = new Metric();
          val475.read(input);
          this.success[key474] = val475;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_metrics_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_metrics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter476 in this.success)
    {
      if (this.success.hasOwnProperty(kiter476))
      {
        var viter477 = this.success[kiter476];
        output.writeString(kiter476);
        viter477.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_startTrace_args = function(args) {
  this.traceId = null;
  this.requestId = null;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
    if (args.requestId !== undefined) {
      this.requestId = args.requestId;
    }
  }
};
Blur_startTrace_args.prototype = {};
Blur_startTrace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.traceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_startTrace_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_startTrace_args');
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.STRING, 1);
    output.writeString(this.traceId);
    output.writeFieldEnd();
  }
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 2);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_startTrace_result = function(args) {
};
Blur_startTrace_result.prototype = {};
Blur_startTrace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_startTrace_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_startTrace_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceList_args = function(args) {
};
Blur_traceList_args.prototype = {};
Blur_traceList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_traceList_result.prototype = {};
Blur_traceList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size478 = 0;
        var _rtmp3482;
        this.success = [];
        var _etype481 = 0;
        _rtmp3482 = input.readListBegin();
        _etype481 = _rtmp3482.etype;
        _size478 = _rtmp3482.size;
        for (var _i483 = 0; _i483 < _size478; ++_i483)
        {
          var elem484 = null;
          elem484 = input.readString().value;
          this.success.push(elem484);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter485 in this.success)
    {
      if (this.success.hasOwnProperty(iter485))
      {
        iter485 = this.success[iter485];
        output.writeString(iter485);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRequestList_args = function(args) {
  this.traceId = null;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
  }
};
Blur_traceRequestList_args.prototype = {};
Blur_traceRequestList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.traceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRequestList_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRequestList_args');
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.STRING, 1);
    output.writeString(this.traceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRequestList_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_traceRequestList_result.prototype = {};
Blur_traceRequestList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size486 = 0;
        var _rtmp3490;
        this.success = [];
        var _etype489 = 0;
        _rtmp3490 = input.readListBegin();
        _etype489 = _rtmp3490.etype;
        _size486 = _rtmp3490.size;
        for (var _i491 = 0; _i491 < _size486; ++_i491)
        {
          var elem492 = null;
          elem492 = input.readString().value;
          this.success.push(elem492);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRequestList_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRequestList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter493 in this.success)
    {
      if (this.success.hasOwnProperty(iter493))
      {
        iter493 = this.success[iter493];
        output.writeString(iter493);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRequestFetch_args = function(args) {
  this.traceId = null;
  this.requestId = null;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
    if (args.requestId !== undefined) {
      this.requestId = args.requestId;
    }
  }
};
Blur_traceRequestFetch_args.prototype = {};
Blur_traceRequestFetch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.traceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRequestFetch_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRequestFetch_args');
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.STRING, 1);
    output.writeString(this.traceId);
    output.writeFieldEnd();
  }
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 2);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRequestFetch_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_traceRequestFetch_result.prototype = {};
Blur_traceRequestFetch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRequestFetch_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRequestFetch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRemove_args = function(args) {
  this.traceId = null;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
  }
};
Blur_traceRemove_args.prototype = {};
Blur_traceRemove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.traceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRemove_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRemove_args');
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.STRING, 1);
    output.writeString(this.traceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_traceRemove_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_traceRemove_result.prototype = {};
Blur_traceRemove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_traceRemove_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_traceRemove_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_ping_args = function(args) {
};
Blur_ping_args.prototype = {};
Blur_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_ping_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_ping_result = function(args) {
};
Blur_ping_result.prototype = {};
Blur_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_ping_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_logging_args = function(args) {
  this.classNameOrLoggerName = null;
  this.level = null;
  if (args) {
    if (args.classNameOrLoggerName !== undefined) {
      this.classNameOrLoggerName = args.classNameOrLoggerName;
    }
    if (args.level !== undefined) {
      this.level = args.level;
    }
  }
};
Blur_logging_args.prototype = {};
Blur_logging_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.classNameOrLoggerName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.level = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_logging_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_logging_args');
  if (this.classNameOrLoggerName !== null && this.classNameOrLoggerName !== undefined) {
    output.writeFieldBegin('classNameOrLoggerName', Thrift.Type.STRING, 1);
    output.writeString(this.classNameOrLoggerName);
    output.writeFieldEnd();
  }
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.I32, 2);
    output.writeI32(this.level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_logging_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_logging_result.prototype = {};
Blur_logging_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_logging_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_logging_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_resetLogging_args = function(args) {
};
Blur_resetLogging_args.prototype = {};
Blur_resetLogging_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_resetLogging_args.prototype.write = function(output) {
  output.writeStructBegin('Blur_resetLogging_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Blur_resetLogging_result = function(args) {
  this.ex = null;
  if (args instanceof BlurException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
Blur_resetLogging_result.prototype = {};
Blur_resetLogging_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new BlurException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Blur_resetLogging_result.prototype.write = function(output) {
  output.writeStructBegin('Blur_resetLogging_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BlurClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
BlurClient.prototype = {};
BlurClient.prototype.listInstalledCommands = function() {
  this.send_listInstalledCommands();
  return this.recv_listInstalledCommands();
};

BlurClient.prototype.send_listInstalledCommands = function() {
  this.output.writeMessageBegin('listInstalledCommands', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_listInstalledCommands_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_listInstalledCommands = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_listInstalledCommands_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listInstalledCommands failed: unknown result';
};
BlurClient.prototype.execute = function(commandName, arguments) {
  this.send_execute(commandName, arguments);
  return this.recv_execute();
};

BlurClient.prototype.send_execute = function(commandName, arguments) {
  this.output.writeMessageBegin('execute', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_execute_args();
  args.commandName = commandName;
  args.arguments = arguments;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_execute = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_execute_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.bex) {
    throw result.bex;
  }
  if (null !== result.tex) {
    throw result.tex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'execute failed: unknown result';
};
BlurClient.prototype.reconnect = function(instanceExecutionId) {
  this.send_reconnect(instanceExecutionId);
  return this.recv_reconnect();
};

BlurClient.prototype.send_reconnect = function(instanceExecutionId) {
  this.output.writeMessageBegin('reconnect', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_reconnect_args();
  args.instanceExecutionId = instanceExecutionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_reconnect = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_reconnect_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.bex) {
    throw result.bex;
  }
  if (null !== result.tex) {
    throw result.tex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'reconnect failed: unknown result';
};
BlurClient.prototype.commandStatusList = function(startingAt, fetch, state) {
  this.send_commandStatusList(startingAt, fetch, state);
  return this.recv_commandStatusList();
};

BlurClient.prototype.send_commandStatusList = function(startingAt, fetch, state) {
  this.output.writeMessageBegin('commandStatusList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_commandStatusList_args();
  args.startingAt = startingAt;
  args.fetch = fetch;
  args.state = state;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_commandStatusList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_commandStatusList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'commandStatusList failed: unknown result';
};
BlurClient.prototype.commandStatus = function(commandExecutionId) {
  this.send_commandStatus(commandExecutionId);
  return this.recv_commandStatus();
};

BlurClient.prototype.send_commandStatus = function(commandExecutionId) {
  this.output.writeMessageBegin('commandStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_commandStatus_args();
  args.commandExecutionId = commandExecutionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_commandStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_commandStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'commandStatus failed: unknown result';
};
BlurClient.prototype.commandCancel = function(commandExecutionId) {
  this.send_commandCancel(commandExecutionId);
  this.recv_commandCancel();
};

BlurClient.prototype.send_commandCancel = function(commandExecutionId) {
  this.output.writeMessageBegin('commandCancel', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_commandCancel_args();
  args.commandExecutionId = commandExecutionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_commandCancel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_commandCancel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.refresh = function() {
  this.send_refresh();
};

BlurClient.prototype.send_refresh = function() {
  this.output.writeMessageBegin('refresh', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_refresh_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};
BlurClient.prototype.createTable = function(tableDescriptor) {
  this.send_createTable(tableDescriptor);
  this.recv_createTable();
};

BlurClient.prototype.send_createTable = function(tableDescriptor) {
  this.output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_createTable_args();
  args.tableDescriptor = tableDescriptor;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_createTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_createTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.enableTable = function(table) {
  this.send_enableTable(table);
  this.recv_enableTable();
};

BlurClient.prototype.send_enableTable = function(table) {
  this.output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_enableTable_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_enableTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_enableTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.disableTable = function(table) {
  this.send_disableTable(table);
  this.recv_disableTable();
};

BlurClient.prototype.send_disableTable = function(table) {
  this.output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_disableTable_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_disableTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_disableTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.removeTable = function(table, deleteIndexFiles) {
  this.send_removeTable(table, deleteIndexFiles);
  this.recv_removeTable();
};

BlurClient.prototype.send_removeTable = function(table, deleteIndexFiles) {
  this.output.writeMessageBegin('removeTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_removeTable_args();
  args.table = table;
  args.deleteIndexFiles = deleteIndexFiles;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_removeTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_removeTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.addColumnDefinition = function(table, columnDefinition) {
  this.send_addColumnDefinition(table, columnDefinition);
  return this.recv_addColumnDefinition();
};

BlurClient.prototype.send_addColumnDefinition = function(table, columnDefinition) {
  this.output.writeMessageBegin('addColumnDefinition', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_addColumnDefinition_args();
  args.table = table;
  args.columnDefinition = columnDefinition;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_addColumnDefinition = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_addColumnDefinition_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'addColumnDefinition failed: unknown result';
};
BlurClient.prototype.tableList = function() {
  this.send_tableList();
  return this.recv_tableList();
};

BlurClient.prototype.send_tableList = function() {
  this.output.writeMessageBegin('tableList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_tableList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_tableList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_tableList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'tableList failed: unknown result';
};
BlurClient.prototype.tableListByCluster = function(cluster) {
  this.send_tableListByCluster(cluster);
  return this.recv_tableListByCluster();
};

BlurClient.prototype.send_tableListByCluster = function(cluster) {
  this.output.writeMessageBegin('tableListByCluster', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_tableListByCluster_args();
  args.cluster = cluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_tableListByCluster = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_tableListByCluster_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'tableListByCluster failed: unknown result';
};
BlurClient.prototype.describe = function(table) {
  this.send_describe(table);
  return this.recv_describe();
};

BlurClient.prototype.send_describe = function(table) {
  this.output.writeMessageBegin('describe', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_describe_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_describe = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_describe_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'describe failed: unknown result';
};
BlurClient.prototype.schema = function(table) {
  this.send_schema(table);
  return this.recv_schema();
};

BlurClient.prototype.send_schema = function(table) {
  this.output.writeMessageBegin('schema', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_schema_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_schema = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_schema_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'schema failed: unknown result';
};
BlurClient.prototype.parseQuery = function(table, query) {
  this.send_parseQuery(table, query);
  return this.recv_parseQuery();
};

BlurClient.prototype.send_parseQuery = function(table, query) {
  this.output.writeMessageBegin('parseQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_parseQuery_args();
  args.table = table;
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_parseQuery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_parseQuery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'parseQuery failed: unknown result';
};
BlurClient.prototype.tableStats = function(table) {
  this.send_tableStats(table);
  return this.recv_tableStats();
};

BlurClient.prototype.send_tableStats = function(table) {
  this.output.writeMessageBegin('tableStats', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_tableStats_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_tableStats = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_tableStats_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'tableStats failed: unknown result';
};
BlurClient.prototype.optimize = function(table, numberOfSegmentsPerShard) {
  this.send_optimize(table, numberOfSegmentsPerShard);
  this.recv_optimize();
};

BlurClient.prototype.send_optimize = function(table, numberOfSegmentsPerShard) {
  this.output.writeMessageBegin('optimize', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_optimize_args();
  args.table = table;
  args.numberOfSegmentsPerShard = numberOfSegmentsPerShard;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_optimize = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_optimize_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.createSnapshot = function(table, name) {
  this.send_createSnapshot(table, name);
  this.recv_createSnapshot();
};

BlurClient.prototype.send_createSnapshot = function(table, name) {
  this.output.writeMessageBegin('createSnapshot', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_createSnapshot_args();
  args.table = table;
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_createSnapshot = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_createSnapshot_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.removeSnapshot = function(table, name) {
  this.send_removeSnapshot(table, name);
  this.recv_removeSnapshot();
};

BlurClient.prototype.send_removeSnapshot = function(table, name) {
  this.output.writeMessageBegin('removeSnapshot', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_removeSnapshot_args();
  args.table = table;
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_removeSnapshot = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_removeSnapshot_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.listSnapshots = function(table) {
  this.send_listSnapshots(table);
  return this.recv_listSnapshots();
};

BlurClient.prototype.send_listSnapshots = function(table) {
  this.output.writeMessageBegin('listSnapshots', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_listSnapshots_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_listSnapshots = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_listSnapshots_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listSnapshots failed: unknown result';
};
BlurClient.prototype.setUser = function(user) {
  this.send_setUser(user);
};

BlurClient.prototype.send_setUser = function(user) {
  this.output.writeMessageBegin('setUser', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_setUser_args();
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};
BlurClient.prototype.query = function(table, blurQuery) {
  this.send_query(table, blurQuery);
  return this.recv_query();
};

BlurClient.prototype.send_query = function(table, blurQuery) {
  this.output.writeMessageBegin('query', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_query_args();
  args.table = table;
  args.blurQuery = blurQuery;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_query = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_query_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'query failed: unknown result';
};
BlurClient.prototype.fetchRow = function(table, selector) {
  this.send_fetchRow(table, selector);
  return this.recv_fetchRow();
};

BlurClient.prototype.send_fetchRow = function(table, selector) {
  this.output.writeMessageBegin('fetchRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_fetchRow_args();
  args.table = table;
  args.selector = selector;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_fetchRow = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_fetchRow_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchRow failed: unknown result';
};
BlurClient.prototype.fetchRowBatch = function(table, selectors) {
  this.send_fetchRowBatch(table, selectors);
  return this.recv_fetchRowBatch();
};

BlurClient.prototype.send_fetchRowBatch = function(table, selectors) {
  this.output.writeMessageBegin('fetchRowBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_fetchRowBatch_args();
  args.table = table;
  args.selectors = selectors;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_fetchRowBatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_fetchRowBatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetchRowBatch failed: unknown result';
};
BlurClient.prototype.loadData = function(table, location) {
  this.send_loadData(table, location);
  this.recv_loadData();
};

BlurClient.prototype.send_loadData = function(table, location) {
  this.output.writeMessageBegin('loadData', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_loadData_args();
  args.table = table;
  args.location = location;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_loadData = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_loadData_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.mutate = function(mutation) {
  this.send_mutate(mutation);
  this.recv_mutate();
};

BlurClient.prototype.send_mutate = function(mutation) {
  this.output.writeMessageBegin('mutate', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_mutate_args();
  args.mutation = mutation;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_mutate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_mutate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.enqueueMutate = function(mutation) {
  this.send_enqueueMutate(mutation);
  this.recv_enqueueMutate();
};

BlurClient.prototype.send_enqueueMutate = function(mutation) {
  this.output.writeMessageBegin('enqueueMutate', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_enqueueMutate_args();
  args.mutation = mutation;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_enqueueMutate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_enqueueMutate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.mutateBatch = function(mutations) {
  this.send_mutateBatch(mutations);
  this.recv_mutateBatch();
};

BlurClient.prototype.send_mutateBatch = function(mutations) {
  this.output.writeMessageBegin('mutateBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_mutateBatch_args();
  args.mutations = mutations;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_mutateBatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_mutateBatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.enqueueMutateBatch = function(mutations) {
  this.send_enqueueMutateBatch(mutations);
  this.recv_enqueueMutateBatch();
};

BlurClient.prototype.send_enqueueMutateBatch = function(mutations) {
  this.output.writeMessageBegin('enqueueMutateBatch', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_enqueueMutateBatch_args();
  args.mutations = mutations;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_enqueueMutateBatch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_enqueueMutateBatch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.bulkMutateStart = function(bulkId) {
  this.send_bulkMutateStart(bulkId);
  this.recv_bulkMutateStart();
};

BlurClient.prototype.send_bulkMutateStart = function(bulkId) {
  this.output.writeMessageBegin('bulkMutateStart', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_bulkMutateStart_args();
  args.bulkId = bulkId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_bulkMutateStart = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_bulkMutateStart_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.bulkMutateAdd = function(bulkId, rowMutation) {
  this.send_bulkMutateAdd(bulkId, rowMutation);
  this.recv_bulkMutateAdd();
};

BlurClient.prototype.send_bulkMutateAdd = function(bulkId, rowMutation) {
  this.output.writeMessageBegin('bulkMutateAdd', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_bulkMutateAdd_args();
  args.bulkId = bulkId;
  args.rowMutation = rowMutation;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_bulkMutateAdd = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_bulkMutateAdd_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.bulkMutateAddMultiple = function(bulkId, rowMutations) {
  this.send_bulkMutateAddMultiple(bulkId, rowMutations);
  this.recv_bulkMutateAddMultiple();
};

BlurClient.prototype.send_bulkMutateAddMultiple = function(bulkId, rowMutations) {
  this.output.writeMessageBegin('bulkMutateAddMultiple', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_bulkMutateAddMultiple_args();
  args.bulkId = bulkId;
  args.rowMutations = rowMutations;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_bulkMutateAddMultiple = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_bulkMutateAddMultiple_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.bulkMutateFinish = function(bulkId, apply, blockUntilComplete) {
  this.send_bulkMutateFinish(bulkId, apply, blockUntilComplete);
  this.recv_bulkMutateFinish();
};

BlurClient.prototype.send_bulkMutateFinish = function(bulkId, apply, blockUntilComplete) {
  this.output.writeMessageBegin('bulkMutateFinish', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_bulkMutateFinish_args();
  args.bulkId = bulkId;
  args.apply = apply;
  args.blockUntilComplete = blockUntilComplete;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_bulkMutateFinish = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_bulkMutateFinish_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.cancelQuery = function(table, uuid) {
  this.send_cancelQuery(table, uuid);
  this.recv_cancelQuery();
};

BlurClient.prototype.send_cancelQuery = function(table, uuid) {
  this.output.writeMessageBegin('cancelQuery', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_cancelQuery_args();
  args.table = table;
  args.uuid = uuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_cancelQuery = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_cancelQuery_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.queryStatusIdList = function(table) {
  this.send_queryStatusIdList(table);
  return this.recv_queryStatusIdList();
};

BlurClient.prototype.send_queryStatusIdList = function(table) {
  this.output.writeMessageBegin('queryStatusIdList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_queryStatusIdList_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_queryStatusIdList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_queryStatusIdList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'queryStatusIdList failed: unknown result';
};
BlurClient.prototype.queryStatusById = function(table, uuid) {
  this.send_queryStatusById(table, uuid);
  return this.recv_queryStatusById();
};

BlurClient.prototype.send_queryStatusById = function(table, uuid) {
  this.output.writeMessageBegin('queryStatusById', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_queryStatusById_args();
  args.table = table;
  args.uuid = uuid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_queryStatusById = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_queryStatusById_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'queryStatusById failed: unknown result';
};
BlurClient.prototype.terms = function(table, columnFamily, columnName, startWith, size) {
  this.send_terms(table, columnFamily, columnName, startWith, size);
  return this.recv_terms();
};

BlurClient.prototype.send_terms = function(table, columnFamily, columnName, startWith, size) {
  this.output.writeMessageBegin('terms', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_terms_args();
  args.table = table;
  args.columnFamily = columnFamily;
  args.columnName = columnName;
  args.startWith = startWith;
  args.size = size;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_terms = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_terms_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'terms failed: unknown result';
};
BlurClient.prototype.recordFrequency = function(table, columnFamily, columnName, value) {
  this.send_recordFrequency(table, columnFamily, columnName, value);
  return this.recv_recordFrequency();
};

BlurClient.prototype.send_recordFrequency = function(table, columnFamily, columnName, value) {
  this.output.writeMessageBegin('recordFrequency', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_recordFrequency_args();
  args.table = table;
  args.columnFamily = columnFamily;
  args.columnName = columnName;
  args.value = value;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_recordFrequency = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_recordFrequency_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'recordFrequency failed: unknown result';
};
BlurClient.prototype.shardClusterList = function() {
  this.send_shardClusterList();
  return this.recv_shardClusterList();
};

BlurClient.prototype.send_shardClusterList = function() {
  this.output.writeMessageBegin('shardClusterList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardClusterList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardClusterList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardClusterList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardClusterList failed: unknown result';
};
BlurClient.prototype.shardServerList = function(cluster) {
  this.send_shardServerList(cluster);
  return this.recv_shardServerList();
};

BlurClient.prototype.send_shardServerList = function(cluster) {
  this.output.writeMessageBegin('shardServerList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardServerList_args();
  args.cluster = cluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardServerList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardServerList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardServerList failed: unknown result';
};
BlurClient.prototype.controllerServerList = function() {
  this.send_controllerServerList();
  return this.recv_controllerServerList();
};

BlurClient.prototype.send_controllerServerList = function() {
  this.output.writeMessageBegin('controllerServerList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_controllerServerList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_controllerServerList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_controllerServerList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'controllerServerList failed: unknown result';
};
BlurClient.prototype.shardServerLayout = function(table) {
  this.send_shardServerLayout(table);
  return this.recv_shardServerLayout();
};

BlurClient.prototype.send_shardServerLayout = function(table) {
  this.output.writeMessageBegin('shardServerLayout', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardServerLayout_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardServerLayout = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardServerLayout_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardServerLayout failed: unknown result';
};
BlurClient.prototype.shardServerLayoutState = function(table) {
  this.send_shardServerLayoutState(table);
  return this.recv_shardServerLayoutState();
};

BlurClient.prototype.send_shardServerLayoutState = function(table) {
  this.output.writeMessageBegin('shardServerLayoutState', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_shardServerLayoutState_args();
  args.table = table;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_shardServerLayoutState = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_shardServerLayoutState_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'shardServerLayoutState failed: unknown result';
};
BlurClient.prototype.isInSafeMode = function(cluster) {
  this.send_isInSafeMode(cluster);
  return this.recv_isInSafeMode();
};

BlurClient.prototype.send_isInSafeMode = function(cluster) {
  this.output.writeMessageBegin('isInSafeMode', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_isInSafeMode_args();
  args.cluster = cluster;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_isInSafeMode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_isInSafeMode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'isInSafeMode failed: unknown result';
};
BlurClient.prototype.configuration = function() {
  this.send_configuration();
  return this.recv_configuration();
};

BlurClient.prototype.send_configuration = function() {
  this.output.writeMessageBegin('configuration', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_configuration_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_configuration = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_configuration_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'configuration failed: unknown result';
};
BlurClient.prototype.configurationPerServer = function(thriftServerPlusPort, configName) {
  this.send_configurationPerServer(thriftServerPlusPort, configName);
  return this.recv_configurationPerServer();
};

BlurClient.prototype.send_configurationPerServer = function(thriftServerPlusPort, configName) {
  this.output.writeMessageBegin('configurationPerServer', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_configurationPerServer_args();
  args.thriftServerPlusPort = thriftServerPlusPort;
  args.configName = configName;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_configurationPerServer = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_configurationPerServer_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'configurationPerServer failed: unknown result';
};
BlurClient.prototype.metrics = function(metrics) {
  this.send_metrics(metrics);
  return this.recv_metrics();
};

BlurClient.prototype.send_metrics = function(metrics) {
  this.output.writeMessageBegin('metrics', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_metrics_args();
  args.metrics = metrics;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_metrics = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_metrics_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'metrics failed: unknown result';
};
BlurClient.prototype.startTrace = function(traceId, requestId) {
  this.send_startTrace(traceId, requestId);
};

BlurClient.prototype.send_startTrace = function(traceId, requestId) {
  this.output.writeMessageBegin('startTrace', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_startTrace_args();
  args.traceId = traceId;
  args.requestId = requestId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};
BlurClient.prototype.traceList = function() {
  this.send_traceList();
  return this.recv_traceList();
};

BlurClient.prototype.send_traceList = function() {
  this.output.writeMessageBegin('traceList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_traceList_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_traceList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_traceList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'traceList failed: unknown result';
};
BlurClient.prototype.traceRequestList = function(traceId) {
  this.send_traceRequestList(traceId);
  return this.recv_traceRequestList();
};

BlurClient.prototype.send_traceRequestList = function(traceId) {
  this.output.writeMessageBegin('traceRequestList', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_traceRequestList_args();
  args.traceId = traceId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_traceRequestList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_traceRequestList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'traceRequestList failed: unknown result';
};
BlurClient.prototype.traceRequestFetch = function(traceId, requestId) {
  this.send_traceRequestFetch(traceId, requestId);
  return this.recv_traceRequestFetch();
};

BlurClient.prototype.send_traceRequestFetch = function(traceId, requestId) {
  this.output.writeMessageBegin('traceRequestFetch', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_traceRequestFetch_args();
  args.traceId = traceId;
  args.requestId = requestId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_traceRequestFetch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_traceRequestFetch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'traceRequestFetch failed: unknown result';
};
BlurClient.prototype.traceRemove = function(traceId) {
  this.send_traceRemove(traceId);
  this.recv_traceRemove();
};

BlurClient.prototype.send_traceRemove = function(traceId) {
  this.output.writeMessageBegin('traceRemove', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_traceRemove_args();
  args.traceId = traceId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_traceRemove = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_traceRemove_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.ping = function() {
  this.send_ping();
  this.recv_ping();
};

BlurClient.prototype.send_ping = function() {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
BlurClient.prototype.logging = function(classNameOrLoggerName, level) {
  this.send_logging(classNameOrLoggerName, level);
  this.recv_logging();
};

BlurClient.prototype.send_logging = function(classNameOrLoggerName, level) {
  this.output.writeMessageBegin('logging', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_logging_args();
  args.classNameOrLoggerName = classNameOrLoggerName;
  args.level = level;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_logging = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_logging_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
BlurClient.prototype.resetLogging = function() {
  this.send_resetLogging();
  this.recv_resetLogging();
};

BlurClient.prototype.send_resetLogging = function() {
  this.output.writeMessageBegin('resetLogging', Thrift.MessageType.CALL, this.seqid);
  var args = new Blur_resetLogging_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

BlurClient.prototype.recv_resetLogging = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Blur_resetLogging_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
